<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot整合Demo实例</title>
      <link href="/2020/09/01/SpringBoot%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/"/>
      <url>/2020/09/01/SpringBoot%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot + MyBatis + Druid + Shiro实例</p><p>工具：IDEA2020.1.4+Navicat+postman</p></blockquote><a id="more"></a><h2 id="项目架构图"><a href="#项目架构图" class="headerlink" title="项目架构图"></a>项目架构图</h2><p>​                                                                <a href="https://imgchr.com/i/dTZxKS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/28/dTZxKS.png" alt="dTZxKS.png" style="zoom: 33%;"></a></p><ul><li><strong>common</strong>：这里存放了两个类CommoMessage和CommonResult。Message主要作为消息的实体，Result则为静态类，主要用于返回结果的调用。</li><li><strong>dao</strong>：存储对象的实体。</li><li><strong>mapper</strong>：存储调用动态SQL语句的接口。</li><li><strong>service</strong>：调用mapper接口，为Controller对象服务。</li><li><strong>controller</strong>：实现对前端参数的接收，并与前端的交互。</li><li><strong>mapping</strong>：自动生成的mgb文件。</li><li><strong>templates</strong>：存储对应的前端html文件。</li><li><strong>static</strong>：存放js、css、图片等静态资源文件。</li><li><strong>application.yml</strong>：配置项目所使用的模块。</li></ul><h2 id="项目思路及流程"><a href="#项目思路及流程" class="headerlink" title="项目思路及流程"></a>项目思路及流程</h2><h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类可以自己定义，也可以自动生成。mapping中自动生成的mapper.xml也是从该处自动生成。</p><p><a href="https://imgchr.com/i/dxLlz8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/01/dxLlz8.png" alt="dxLlz8.png" style="zoom:33%;"></a></p><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/user?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    prefix:</span> <span class="attr">classpath:/templates/</span></span><br><span class="line"><span class="attr">    suffix:</span> <span class="string">.html</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.springboot.demo.dao</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapping/*Mapper.xml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>配置spring中所使用到的数据源，mybatis映射的实体类所在位置，以及mapper文件所在的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 首页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若不配置thymeleaf，templates中的html文件则不会显示，而显示”index”字符。</p><p>而在templates目录下所有的页面，只能通过<strong>@Controller</strong>跳转。</p><h3 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--该处对应映射的mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.springboot.demo.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对应返回的实体类的映射格式--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.springboot.demo.dao.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"userId"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></span><br><span class="line">    id, username, `password`</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllUsers"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"login"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select * from user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id==&gt;mapper接口的方法，parmeterType==&gt;接收参数类型，resulMap==&gt;返回数据的映射格式--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis-generator自动生成，用于处理数据库中的数据，需要使用到别的SQL也可自行添加。</p><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">login</span><span class="params">(String username, String password)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function">User <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mybatis-generator自动生成，每个方法与Mapper.xml中的id一一对应。</p><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value = <span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAllUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectAllUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.login(username, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用mapper中的方法，需要哪个就调用哪个。</p><p>必须添加<code>@Service</code>注解，否则controller找不到注入的bean。</p><p><code>@Autowired</code> 自动注入装配bean。</p><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/all"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonMessage <span class="title">selectAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        CommonMessage&lt;User&gt; msg = <span class="keyword">new</span> CommonMessage&lt;&gt;();</span><br><span class="line">        List&lt;User&gt; user = userService.selectAllUsers();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.error(<span class="number">400</span>,<span class="string">"出现异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonMessage <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password, @RequestHeader String token)</span>&#123;</span><br><span class="line"></span><br><span class="line">        User user1 = userService.login(name, password);</span><br><span class="line">        <span class="keyword">if</span>(user1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.error(<span class="number">500</span>,<span class="string">"账号或密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Controller</code>：返回页面；@RequestMapping：返回字符串对象。</p><p><code>@RequestMapping</code>：设置访问路径；<code>@RequestParam(“param”)</code>：设置接收参数及其类型；<code>@RequestHeader</code>：设置请求头部所传入的参数(通常为token)。</p><p><code>@GetMapping</code>：方法为GET的RequestMapping；<code>@PostMapping</code>：方法为POST的RequestMapping。</p></blockquote><h3 id="common"><a href="#common" class="headerlink" title="common"></a>common</h3><ul><li><strong>CommonMessage.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonMessage</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>CommonResult.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonMessage&lt;Object&gt; <span class="title">success</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        CommonMessage&lt;Object&gt; msg = <span class="keyword">new</span> CommonMessage&lt;&gt;();</span><br><span class="line">        msg.setCode(<span class="number">200</span>);</span><br><span class="line">        msg.setMsg(<span class="string">"请求成功"</span>);</span><br><span class="line">        msg.setData(object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonMessage&lt;Object&gt; <span class="title">success</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonMessage <span class="title">error</span><span class="params">(Integer code, String resultMsg)</span></span>&#123;</span><br><span class="line">        CommonMessage msg = <span class="keyword">new</span> CommonMessage();</span><br><span class="line">        msg.setCode(code);</span><br><span class="line">        msg.setMsg(resultMsg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DemoApplication"><a href="#DemoApplication" class="headerlink" title="DemoApplication"></a>DemoApplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.springboot.demo.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@MapperScan</code>：使mapper接口生效，否则找不到mapper中使用的方法。如果mapper层中加入<code>@Mapper</code>注解的话，这里就不需要加<code>@MapperScan</code>。</li></ul><h2 id="项目演示"><a href="#项目演示" class="headerlink" title="项目演示"></a>项目演示</h2><p><img src="https://s1.ax1x.com/2020/09/01/dxLKit.png" alt="dxLKit.png"></p><h2 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h2><h3 id="添加druid依赖"><a href="#添加druid依赖" class="headerlink" title="添加druid依赖"></a>添加druid依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：添加的是<code>druid-spring-boot-starter</code>，而不是<code>druid-core</code>，否则后面的yml配置文件无法获取druid数据源。</p><h3 id="yml中添加druid配置"><a href="#yml中添加druid配置" class="headerlink" title="yml中添加druid配置"></a>yml中添加druid配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment">#serverTimezone=UTC解决时区的报错</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/user?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment">#自定义数据源</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置,使用该配置需要导入druid-spring-boot-starter依赖</span></span><br><span class="line"><span class="attr">    initial-size:</span> <span class="number">5</span> <span class="comment">#初始化连接数</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">5</span> <span class="comment">#回收空闲连接时，将保证至少有minIdle个连接.建议与初始化值相同</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">20</span> <span class="comment">#连接池中最多支持多少个活动会话</span></span><br><span class="line">    <span class="comment">#程序向连接池中请求连接时,超过maxWait的值后，认为本次请求失败，即连接池没有可用连接，单位毫秒，设置-1时表示无限等待</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment">#检查空闲连接的频率，单位毫秒, 非正整数时表示不进行检查</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span> <span class="comment">#检查空闲连接的频率，单位毫秒, 非正整数时表示不进行检查</span></span><br><span class="line">    <span class="comment">#池中某个连接的空闲时长达到 N 毫秒后, 连接池在下次检查空闲连接时，将回收该连接,要小于防火墙超时设置</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="comment">#检查池中的连接是否仍可用的 SQL 语句,druid会连接到数据库执行该SQL, 如果正常返回，则表示连接可用，否则表示连接不可用</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span> <span class="comment">#当程序请求连接，池在分配连接时，是否先检查该连接是否有效。(高效)</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span> <span class="comment">#程序 申请 连接时,进行连接有效性检查（低效，影响性能）</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span> <span class="comment">#程序 返还 连接时,进行连接有效性检查（低效，影响性能）</span></span><br><span class="line">    <span class="comment">#缓存通过以下两个方法发起的SQL:</span></span><br><span class="line">    <span class="comment">#public PreparedStatement prepareStatement(String sql)</span></span><br><span class="line">    <span class="comment">#public PreparedStatement prepareStatement(String sql,int resultSetType, int resultSetConcurrency)</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="comment">#如果允许时报错 java.lang.ClassNotFoundException: org.apache.log4j.Priority 则导入log4j依赖</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span> <span class="comment">#每个连接最多缓存多少个SQL</span></span><br><span class="line"><span class="attr">    useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#通过connectionProperties打开mergeSql和慢查询功能</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>如果该yml文件不可初始化druid，可以在datasource后面加上一级druid。</p><img src="https://s1.ax1x.com/2020/09/01/dxLQRf.png" alt="dxLQRf.png" style="zoom:33%;"><h3 id="覆盖springboot的数据源配置"><a href="#覆盖springboot的数据源配置" class="headerlink" title="覆盖springboot的数据源配置"></a>覆盖springboot的数据源配置</h3><p><strong>DruidConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将自定义的 Druid 数据源添加到容器中，不再让 Spring Boot 自动创建</span></span><br><span class="line"><span class="comment">     * 这样做的目的是：绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">     * 从而让它们生效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * ConfigurationProperties(prefix = "spring.datasource")：作用就是将 全局配置文件中 前缀为 spring.datasource</span></span><br><span class="line"><span class="comment">     * 的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid监控管理后台的servlet</span></span><br><span class="line">    <span class="comment">//内置Servlet容器时没有web.xml文件，所以使用springboot的注册servlet的方式</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        <span class="comment">//这些参数可以在com.alibaba.druid.support.http.StatViewServlet的父类com.alibaba.druid.support.http.ResourceServlet 中找到</span></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);<span class="comment">//后台管理界面的登录账号</span></span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"admin"</span>);<span class="comment">//后台管理界面的登录密码</span></span><br><span class="line">        <span class="comment">//后台允许谁可以访问</span></span><br><span class="line">        <span class="comment">//initParams.put("allow","localhost");//表示只有本机可以访问</span></span><br><span class="line">        initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//为空或者为null时，表示允许所有访问</span></span><br><span class="line">        <span class="comment">//deny:Druid后台拒绝访问谁</span></span><br><span class="line">        initParams.put(<span class="string">"dz"</span>,<span class="string">"192.168.1.20"</span>);<span class="comment">//表示禁止此ip访问</span></span><br><span class="line">        <span class="comment">//设置初始化参数</span></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用测试类测试初始化是否成功，druid默认初始化连接数为0，最大连接数为8。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DI注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//看一下默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        DruidDataSource druidDataSource = (DruidDataSource) dataSource;</span><br><span class="line">        System.out.println(<span class="string">"druidDataSource 数据源最大连接数"</span>+druidDataSource.getMaxActive());</span><br><span class="line">        System.out.println(<span class="string">"druidDataSource 数据源初始化连接数"</span>+druidDataSource.getInitialSize());</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="https://s1.ax1x.com/2020/09/01/dxL8sg.png" alt="dxL8sg.png"></p><ul><li>打开<code>localhost:8080/druid/login.html</code>测试（查看数据源前先完成一次数据库操作）。</li></ul><h2 id="整合Shiro"><a href="#整合Shiro" class="headerlink" title="整合Shiro"></a>整合Shiro</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--shiro 注解会用到 aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Realm配置"><a href="#Realm配置" class="headerlink" title="Realm配置"></a>Realm配置</h3><p><strong>MyshiroRealm.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RoleService roleService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行权限处理"</span>);</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">// HttpServletRequest request = (HttpServletRequest) ((WebSubject) SecurityUtils</span></span><br><span class="line">        <span class="comment">// .getSubject()).getServletRequest();//这个可以用来获取在登录的时候提交的其他额外的参数信息</span></span><br><span class="line">        String username = (String)principalCollection.getPrimaryPrincipal();<span class="comment">//获取登录名</span></span><br><span class="line">        User user = userService.selectUserByName(username);<span class="comment">//查找该用户信息</span></span><br><span class="line">        <span class="comment">//角色</span></span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        Role role = roleService.getRoleByUserName(username);<span class="comment">//通过用户名获取角色</span></span><br><span class="line">        roles.add(role.getRoleName());</span><br><span class="line">        simpleAuthorizationInfo.setRoles(roles);</span><br><span class="line">        <span class="comment">//权限</span></span><br><span class="line">        Set&lt;String&gt; permissions = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        List&lt;Permission&gt; permissionList = permissionService.getPermissionByRoleId(role.getRoleId());</span><br><span class="line">        <span class="keyword">for</span> (Permission permission: permissionList) &#123;<span class="comment">//将通过roleId查到的所有权限（permission）添加到set里面</span></span><br><span class="line">            permissions.add(permission.getPermissionName());</span><br><span class="line">        &#125;</span><br><span class="line">        simpleAuthorizationInfo.setStringPermissions(permissions);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行身份认证"</span>);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        String username = (String) authenticationToken.getPrincipal();<span class="comment">//通过getPrincipal方式获取用户名</span></span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken)authenticationToken;<span class="comment">//通过UPT方式获取token</span></span><br><span class="line"></span><br><span class="line">        User user = userService.selectUserByName(token.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有此账号"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//密码判断处理</span></span><br><span class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) authenticationToken.getCredentials());<span class="comment">//获取密码</span></span><br><span class="line">        String inpass = (<span class="keyword">new</span> Md5Hash(password, user.getUsername())).toString();</span><br><span class="line">        <span class="keyword">if</span> (!user.getPassword().equals(inpass)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交给AuthenticatingRealm使用CredentialsMatcher进行密码匹配</span></span><br><span class="line">        <span class="comment">//username &lt;==&gt; token.getUsername();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username, user.getPassword(),</span><br><span class="line">                ByteSource.Util.bytes(username), getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ShiroConfig配置"><a href="#ShiroConfig配置" class="headerlink" title="ShiroConfig配置"></a>ShiroConfig配置</h3><p><strong>ShiroConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ShiroConfiguration.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shiro的web过滤器Factory</span></span><br><span class="line"><span class="comment">     * shiroFilter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">//shiro核心的安全接口</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//需要权限的请求，如果没有登录则会跳转到这里设置的url</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login.html"</span>);</span><br><span class="line">        <span class="comment">//设置登录成功跳转url，一般在登录成功后自己代码设置跳转url，此处基本没用</span></span><br><span class="line">        <span class="comment">//shiroFilterFactoryBean.setSuccessUrl("/main.html");</span></span><br><span class="line">        <span class="comment">//设置无权限跳转界面，一般不生效，一般自定义异常</span></span><br><span class="line">        <span class="comment">//shiroFilterFactoryBean.setUnauthorizedUrl("/error.html");</span></span><br><span class="line">        Map&lt;String, Filter&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        shiroFilterFactoryBean.setFilters(filterMap);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 定义shiro过滤链 Map结构</span></span><br><span class="line"><span class="comment">         * Map中key(xml中是指value值)的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的</span></span><br><span class="line"><span class="comment">         * anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种</span></span><br><span class="line"><span class="comment">         * authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.</span></span><br><span class="line"><span class="comment">         * FormAuthenticationFilter</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边; authc:所有url都必须认证通过才可以访问;</span></span><br><span class="line"><span class="comment">         * anon:所有url都都可以匿名访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/login.html"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/js/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/css/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限管理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"=======================shiro======================="</span>);</span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(MyShiroRealm());</span><br><span class="line"><span class="comment">//        securityManager.setRememberMeManager(rememberMeManager);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定shiro验证用户登录的类为自定义的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyShiroRealm <span class="title">MyShiroRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyShiroRealm userRealm = <span class="keyword">new</span> MyShiroRealm();</span><br><span class="line">        userRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span><br><span class="line">        <span class="keyword">return</span> userRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 凭证匹配器 密码验证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hashedCredentialsMatcher</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"credentialsMatcher"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashedCredentialsMatcher hashedCredentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">//散列算法，MD5</span></span><br><span class="line">        hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line">        <span class="comment">// 散列的次数，比如散列两次，相当于 md5(md5(""));</span></span><br><span class="line">        hashedCredentialsMatcher.setHashIterations(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// storedCredentialsHexEncoded默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码</span></span><br><span class="line">        hashedCredentialsMatcher.setStoredCredentialsHexEncoded(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启Shiro的注解(如<span class="doctag">@RequiresRoles</span>,<span class="doctag">@RequiresPermissions</span>),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试（修改之前的login）"><a href="#测试（修改之前的login）" class="headerlink" title="测试（修改之前的login）"></a>测试（修改之前的<strong>login</strong>）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonMessage <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>&#123;</span><br><span class="line">        String msg = <span class="string">"登录成功"</span>;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//获取username，password，以及开启rememberMe</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(name,password,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span>(!subject.isAuthenticated())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                subject.login(token);<span class="comment">// 会触发com.shiro.config.MyShiroRealm的doGetAuthenticationInfo方法</span></span><br><span class="line">                msg = <span class="string">"登录成功"</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">                msg = <span class="string">"用户名错误"</span>;</span><br><span class="line">                <span class="keyword">return</span> CommonResult.error(<span class="number">600</span>,msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">                msg = <span class="string">"密码错误"</span>;</span><br><span class="line">                <span class="keyword">return</span> CommonResult.error(<span class="number">601</span>,msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><img src="https://s1.ax1x.com/2020/09/01/dxLGLQ.png" alt="dxLGLQ.png" style="zoom:33%;"><img src="https://s1.ax1x.com/2020/09/01/dxLtds.png" alt="dxLtds.png" style="zoom:33%;">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis </tag>
            
            <tag> mysql </tag>
            
            <tag> shiro </tag>
            
            <tag> druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩形重叠</title>
      <link href="/2020/03/18/%E7%9F%A9%E5%BD%A2%E9%87%8D%E5%8F%A0/"/>
      <url>/2020/03/18/%E7%9F%A9%E5%BD%A2%E9%87%8D%E5%8F%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LeetCode每日打卡的第十八天</p><p>解题思路来自LeetCode官方题解<a href="https://leetcode-cn.com/problems/rectangle-overlap/solution/ju-xing-zhong-die-by-leetcode-solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rectangle-overlap/solution/ju-xing-zhong-die-by-leetcode-solution/</a></p></blockquote><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>矩形以列表 <code>[x1, y1, x2, y2]</code> 的形式表示，其中 <code>(x1, y1)</code> 为左下角的坐标，<code>(x2, y2)</code> 是右上角的坐标。如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。给出两个矩形，判断它们是否重叠并返回结果。</p><h2 id="测试用例示例"><a href="#测试用例示例" class="headerlink" title="测试用例示例"></a>测试用例示例</h2><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：rec1 = [0,0,2,2], rec2 = [1,1,3,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：rec1 = [0,0,1,1], rec2 = [1,0,2,1]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>我们尝试分析在什么情况下，矩形 <code>rec1</code> 和 <code>rec2</code> 没有重叠。</p><p>想象一下，如果我们在平面中放置一个固定的矩形 <code>rec2</code>，那么矩形 <code>rec1</code> 必须要出现在 <code>rec2</code> 的「四周」，也就是说，矩形 <code>rec1</code> 需要满足以下四种情况中的至少一种：</p><ul><li>矩形 <code>rec1</code> 在矩形 <code>rec2</code> 的左侧；</li><li>矩形 <code>rec1</code> 在矩形 <code>rec2</code> 的右侧；</li><li>矩形 <code>rec1</code> 在矩形 <code>rec2</code> 的上方；</li><li>矩形 <code>rec1</code> 在矩形 <code>rec2</code> 的下方。</li></ul><p>何为「左侧」？如果矩形 <code>rec1</code> 在矩形 <code>rec2</code> 的左侧，那就表示我们可以找到一条竖直的线（可以与矩形的边重合），使得矩形 <code>rec1</code> 和 <code>rec2</code> 被分在这条竖线的两侧。对于「右侧」、「上方」以及「下方」，它们的定义与「左侧」是类似的。</p></li><li><p>我们将上述的四种情况翻译成代码。具体地，我们用 <code>(rec[0], rec[1])</code> 表示矩形的左下角，<code>(rec[2], rec[3])</code> 表示矩形的右上角，与题目描述一致。对于「左侧」，即矩形 <code>rec1</code> 在 <code>x</code> 轴上的最大值不能大于矩形 <code>rec2</code> 在 <code>x</code> 轴上最小值。对于「右侧」、「上方」以及「下方」同理。因此我们可以翻译成如下的代码：</p><ul><li>左侧：<code>rec1[2] &lt;= rec2[0]</code>；</li><li>右侧：<code>rec1[0] &gt;= rec2[2]</code>；</li><li>上方：<code>rec1[1] &gt;= rec2[3]</code>；</li><li>下方：<code>rec1[3] &lt;= rec2[1]</code>。</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRectangleOverlap</span><span class="params">(<span class="keyword">int</span>[] rec1, <span class="keyword">int</span>[] rec2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(rec1[<span class="number">0</span>] &gt;= rec2[<span class="number">2</span>] || rec1[<span class="number">3</span>] &lt;= rec2[<span class="number">1</span>]</span><br><span class="line">             || rec1[<span class="number">1</span>] &gt;= rec2[<span class="number">3</span>] || rec1[<span class="number">2</span>] &lt;= rec2[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拼写单词</title>
      <link href="/2020/03/18/%E6%8B%BC%E5%86%99%E5%8D%95%E8%AF%8D/"/>
      <url>/2020/03/18/%E6%8B%BC%E5%86%99%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LeetCode每日打卡的第十七天</p><p>解题思路来自于<a href="https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters/solution/tong-ji-zi-mu-chu-xian-de-ci-shu-shu-zu-ji-qiao-cj/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters/solution/tong-ji-zi-mu-chu-xian-de-ci-shu-shu-zu-ji-qiao-cj/</a></p></blockquote><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一份『词汇表』（字符串数组） <code>words</code> 和一张『字母表』（字符串） <code>chars</code>。假如你可以用 <code>chars</code> 中的『字母』（字符）拼写出 <code>words</code> 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。注意：每次拼写（指拼写词汇表中的一个单词）时，<code>chars</code> 中的每个字母都只能用一次。</p><h2 id="测试用例示例"><a href="#测试用例示例" class="headerlink" title="测试用例示例"></a>测试用例示例</h2><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [&quot;cat&quot;,&quot;bt&quot;,&quot;hat&quot;,&quot;tree&quot;], chars = &quot;atach&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释： </span><br><span class="line">可以形成字符串 &quot;cat&quot; 和 &quot;hat&quot;，所以答案是 3 + 3 = 6。</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [&quot;hello&quot;,&quot;world&quot;,&quot;leetcode&quot;], chars = &quot;welldonehoneyr&quot;</span><br><span class="line">输出：10</span><br><span class="line">解释：</span><br><span class="line">可以形成字符串 &quot;hello&quot; 和 &quot;world&quot;，所以答案是 5 + 5 = 10。</span><br></pre></td></tr></table></figure></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><a href="https://imgchr.com/i/8Dw6IO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/18/8Dw6IO.md.png" alt="8Dw6IO.md.png" style="zoom:80%;"></a></li><li><a href="https://imgchr.com/i/8D0mex" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/18/8D0mex.md.png" alt="8D0mex.md.png"></a></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countCharacters</span><span class="params">(String[] words, String chars)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] chars_count = count(chars);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(String word : words)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] word_count = count(word);</span><br><span class="line">        <span class="keyword">if</span>(contains(chars_count, word_count))</span><br><span class="line">            res += word.length();<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将字母中的统计数字和chars中的统计数字比较，26个字母需均比较一遍，全部成功判断为真</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span>[] chars_count, <span class="keyword">int</span>[] word_count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chars_count[i] &lt; word_count[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对字符串中出现的字母进行统计</span></span><br><span class="line"><span class="keyword">int</span>[] count(String word)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] counter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">        counter[c - <span class="string">'a'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串压缩</title>
      <link href="/2020/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9/"/>
      <url>/2020/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LeetCode每日打卡的第十六天</p></blockquote><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。</p><h2 id="测试用例示例"><a href="#测试用例示例" class="headerlink" title="测试用例示例"></a>测试用例示例</h2><ul><li>示例一</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;aabcccccaaa&quot;</span><br><span class="line">输出：&quot;a2b1c5a3&quot;</span><br></pre></td></tr></table></figure><ul><li>示例二</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;abbccd&quot;</span><br><span class="line">输出：&quot;abbccd&quot;</span><br><span class="line">解释：&quot;abbccd&quot;压缩后为&quot;a1b2c2d1&quot;，比原字符串长度更长。</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>字符串压缩的方式就是将连续出现的相同字符按照 字符 + 出现次数 压缩。如果压缩后的字符串长度变短，则返回压缩后的字符串，否则保留原来的字符串，所以我们模拟这个过程构建字符串即可。在遍历结束之后，我们就得到了压缩后的字符串，并将其长度与原串长度进行比较。如果长度没有变短，则返回原串，否则返回压缩后的字符串。</li><li>注意本题中对字符串操作的方法。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">compressString</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="keyword">null</span> || S.length() &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> S;</span><br><span class="line">    <span class="keyword">char</span>[] c = S.toCharArray();</span><br><span class="line">    StringBuilder res = <span class="keyword">new</span> StringBuilder().append(c[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; c.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i] == c[i - <span class="number">1</span>])&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.append(count).append(c[i]);</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.append(count);</span><br><span class="line">    <span class="keyword">if</span>(res.length() &gt;= S.length())</span><br><span class="line">        <span class="keyword">return</span> S;</span><br><span class="line">    <span class="keyword">return</span> res.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>岛屿的最大面积</title>
      <link href="/2020/03/15/%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/"/>
      <url>/2020/03/15/%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LeetCode每日打卡的第十五天</p></blockquote><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个包含了一些 0 和 1的非空二维数组 grid , 一个岛屿是由四个方向 (水平或垂直)的1(代表土地)构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p><p>找到给定的二维数组中最大的岛屿面积（如果没有岛屿，则返回面积为0。）</p><h2 id="测试用例示例"><a href="#测试用例示例" class="headerlink" title="测试用例示例"></a>测试用例示例</h2><ul><li><p>示例一    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,1,1,0,1,0,0,0,0,0,0,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,0,1,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,1,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,0,0,0,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br></pre></td></tr></table></figure><p>对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的’1’</p></li><li><p>示例二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[0,0,0,0,0,0,0,0]]</span><br></pre></td></tr></table></figure><p>对于上面这个给定的矩阵, 返回0。</p><p><strong>注意:</strong> 给定的矩阵grid的长度和宽度都不超过50。</p></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>经典DFS算法</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                max = Math.max(dfs(grid, i, j), max);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= grid.length || j &lt; <span class="number">0</span> || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    grid[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    count += dfs(grid, i+<span class="number">1</span>, j);</span><br><span class="line">    count += dfs(grid, i-<span class="number">1</span>, j);</span><br><span class="line">    count += dfs(grid, i, j+<span class="number">1</span>);</span><br><span class="line">    count += dfs(grid, i, j-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维数组 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分糖果</title>
      <link href="/2020/03/15/%E5%88%86%E7%B3%96%E6%9E%9C/"/>
      <url>/2020/03/15/%E5%88%86%E7%B3%96%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p> LeetCode每日打卡的第五天</p></blockquote><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>排排坐，分糖果。</p><p>我们买了一些糖果 candies，打算把它们分给排好队的 n = num_people 个小朋友。</p><p>给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 n 颗糖果。</p><p>然后，我们再回到队伍的起点，给第一个小朋友 n + 1 颗糖果，第二个小朋友 n + 2 颗，依此类推，直到给最后一个小朋友 2 * n 颗糖果。</p><p>重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。</p><p>返回一个长度为 num_people、元素之和为 candies 的数组，以表示糖果的最终分发情况（即 ans[i] 表示第 i 个小朋友分到的糖果数）。</p><h2 id="测试用例示例"><a href="#测试用例示例" class="headerlink" title="测试用例示例"></a>测试用例示例</h2><ul><li><p>示例一    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：candies = 7, num_people = 4</span><br><span class="line">输出：[1,2,3,1]</span><br><span class="line">解释：</span><br><span class="line">第一次，ans[0] += 1，数组变为 [1,0,0,0]。</span><br><span class="line">第二次，ans[1] += 2，数组变为 [1,2,0,0]。</span><br><span class="line">第三次，ans[2] += 3，数组变为 [1,2,3,0]。</span><br><span class="line">第四次，ans[3] += 1（因为此时只剩下 1 颗糖果），最终数组变为 [1,2,3,1]。</span><br></pre></td></tr></table></figure></li><li><p>示例二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：candies = 10, num_people = 3</span><br><span class="line">输出：[5,2,3]</span><br><span class="line">解释：</span><br><span class="line">第一次，ans[0] += 1，数组变为 [1,0,0]。</span><br><span class="line">第二次，ans[1] += 2，数组变为 [1,2,0]。</span><br><span class="line">第三次，ans[2] += 3，数组变为 [1,2,3]。</span><br><span class="line">第四次，ans[0] += 4，最终数组变为 [5,2,3]。</span><br></pre></td></tr></table></figure></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>创建<code>ans</code>数组，模拟分糖果的过程。</li><li><code>while</code>循环作一轮循环，<code>for</code>作一次循环。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] distributeCandies(<span class="keyword">int</span> candies, <span class="keyword">int</span> num_people)&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="keyword">new</span> <span class="keyword">int</span>[num_people];</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(candies &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.length &amp;&amp; candies &gt; <span class="number">0</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(candies &gt; j)&#123;</span><br><span class="line">                ans[i] += j;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans[i] += candies;</span><br><span class="line">            &#125;</span><br><span class="line">            candies -= j;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零钱兑换</title>
      <link href="/2020/03/08/%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/"/>
      <url>/2020/03/08/%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LeetCode每日打卡的第八天</p></blockquote><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p><h2 id="测试用例示例"><a href="#测试用例示例" class="headerlink" title="测试用例示例"></a>测试用例示例</h2><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: coins = [1, 2, 5], amount = 11</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: coins = [2], amount = 3</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3></li></ul><blockquote><p>代码转自LeetCode评论区</p><p>思路：<a href="https://leetcode-cn.com/problems/coin-change/solution/322-by-ikaruga/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/coin-change/solution/322-by-ikaruga/</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">    Array.sort(coins);</span><br><span class="line">    recurison(coins, amount, <span class="number">0</span>, coins.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> minCount == Integer.MAX_VALUE ? -<span class="number">1</span> : minCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minCount = Integer.MAX_VALUE;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、按金额从大到小，从多到少（排序，用余数一步到位）</span></span><br><span class="line"><span class="comment">     * 2、预判低于最优解，终止递归（可以返回最优解，不过提升有限，意义不大）</span></span><br><span class="line"><span class="comment">     * 3、能整除即可返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount, <span class="keyword">int</span> count, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || count + amount / coins[index] &gt;= minCount) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (amount % coins[index] == <span class="number">0</span>) &#123;</span><br><span class="line">        minCount = Math.min(minCount, count + amount / coins[index]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = amount / coins[index]; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        recursion(coins, amount - i * coins[index], count + i, index - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><blockquote><p><a href="https://leetcode-cn.com/problems/coin-change/solution/java-dfs-bfs-dp-by-joaboo/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/coin-change/solution/java-dfs-bfs-dp-by-joaboo/</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(amount &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    HashSet&lt;Integer&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> size = queue.size() -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(size &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">int</span> rem = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(rem == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> coin : coins)&#123;</span><br><span class="line">                <span class="keyword">if</span>(coin &gt; rem || visited.contains(rem - coin))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                visited.add(rem - coin);</span><br><span class="line">                queue.offer(rem - coin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><blockquote><p>这道题类似于完全背包问题，每个物品都可以无限使用，但是要求背包必须装满，而且要求背包中的物品数目最少， 归纳为数学问题就是，</p><ul><li>v[i]:代表每种硬币的价值</li><li>x[i]:代表每种硬币拿的个数，0&lt;=x[i]&lt;=amount/v[i]</li><li>所求问题可以归纳为：</li><li>在满足：amount=v1x1+v2x2+v3x3+…+vnxn 的条件下</li><li>求： target=min{x1+x2+x3+….xn}</li><li>最简单的一种思路就是把所有{xi}的组合全部拿出来，然后让target最小即可，利用递归就可以解决问题，但是时间复杂度会很高，但是如果有好的剪枝策略，也可以使用</li><li>另外一种方法就是常规的动态规划，利用一个amout+1长度的dp数组，记录每一个状态的最优解，过程见程序和注释</li></ul><p>转自LeetCode评论区</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(coins.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//声明一个amount+1长度的数组dp，代表各个价值的钱包，第0个钱包可以容纳的总价值为0，其它全部初始化为无穷大</span></span><br><span class="line">    <span class="comment">//dp[j]代表当钱包的总价值为j时，所需要的最少硬币的个数</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">    Arrays.fill(dp,<span class="number">1</span>,dp.length,Integer.MAX_VALUE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//i代表可以使用的硬币索引，i=2代表只在第0个，第1个，第2个这三个硬币中选择硬币</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coins.length; i++) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当外层循环执行一次以后，说明在只使用前i-1个硬币的情况下，各个钱包的最少硬币个数已经得到，</span></span><br><span class="line"><span class="comment">     * 有些钱包的值还是无穷大，说明在仅使用前i-1个硬币的情况下，不能凑出钱包的价值</span></span><br><span class="line"><span class="comment">     * 现在开始再放入第i个硬币，要想放如w[i]，钱包的价值必须满足j&gt;=w[i]，所以在开始放入第i个硬币时，j从w[i]开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = coins[i]; j &lt;= amount; j++) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果钱包当前的价值j仅能允许放入一个w[i]，那么就要进行权衡，以获得更少的硬币数</span></span><br><span class="line"><span class="comment"> * 如果放入0个：此时钱包里面硬币的个数保持不变： v0=dp[j]</span></span><br><span class="line"><span class="comment"> * 如果放入1个：此时钱包里面硬币的个数为：v1=dp[j-coins[i]]+1</span></span><br><span class="line"><span class="comment"> *  【前提是dp[j-coins[i]]必须有值，如果dp[j-coins[i]]是无穷大，说明无法凑出j-coins[i]价值的钱包，</span></span><br><span class="line"><span class="comment"> *               那么把w[i]放进去以后，自然也凑不出dp[j]的钱包】</span></span><br><span class="line"><span class="comment"> * 所以，此时当钱包价值为j时，里面的硬币数目为 dp[j]=min&#123;v0,v1&#125;</span></span><br><span class="line"><span class="comment"> * 如果钱包当前价值j能够放入2个w[i]，就要再进行一次权衡</span></span><br><span class="line"><span class="comment"> * 如果不放人第2个w[i]，此时钱包里面硬币数目为，v1=dp[j]=min&#123;v0,v1&#125;</span></span><br><span class="line"><span class="comment"> * 如果放入第2个w[i],  此时钱包里面硬币数目为，v2=dp[j-coins[i]]+1</span></span><br><span class="line"><span class="comment"> * 所以，当钱包的价值为j时，里面的硬币数目为dp[j]=min&#123;v1,v2&#125;=min&#123;v0,v1,v2&#125;</span></span><br><span class="line"><span class="comment"> * 钱包价值j能允许放入3个，4个.........w[i]，不断更新dp[j]，最后得到在仅使用前i个硬币的时候，每个钱包里的最少硬币数目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span>(dp[j-coins[i]] != Integer.MAX_VALUE) &#123;</span><br><span class="line">dp[j] = Math.min(dp[j], dp[j-coins[i]]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(dp[amount] != Integer.MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span> dp[amount];</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腐烂的橘子</title>
      <link href="/2020/03/04/%E8%85%90%E7%83%82%E7%9A%84%E6%A9%98%E5%AD%90/"/>
      <url>/2020/03/04/%E8%85%90%E7%83%82%E7%9A%84%E6%A9%98%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LeetCode每日打卡的第四天</p><p>题解源自：<a href="https://leetcode-cn.com/problems/rotting-oranges/solution/fen-xi-si-lu-bfs-by-peter_pan/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rotting-oranges/solution/fen-xi-si-lu-bfs-by-peter_pan/</a></p></blockquote><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><p>在给定的网格中，每个单元格可以有以下三个值之一：</p><p>值 0 代表空单元格；<br>值 1 代表新鲜橘子；<br>值 2 代表腐烂的橘子。<br>每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。</p><p>返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。</p></li></ul><h2 id="测试用例示例"><a href="#测试用例示例" class="headerlink" title="测试用例示例"></a>测试用例示例</h2><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[[2,1,1],[0,1,1],[1,0,1]]</span><br><span class="line">输出：-1</span><br><span class="line">解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。</span><br></pre></td></tr></table></figure></li></ul><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[[2,1,1],[1,1,0],[0,1,1]]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure></li></ul><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  输入：[[0,2]]</span><br><span class="line">输出：0</span><br><span class="line">  解释：因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。</span><br></pre></td></tr></table></figure></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>找出网格中所有的腐烂橘子，将其加入<code>queue</code>中。</li><li>出队时，让当前腐烂橘子四周的新鲜橘子都变为腐烂，即 <code>grid[newX][newY] = 2</code>。</li><li>用 <code>minute</code> 记录腐烂的持续时间，每一层的橘子在内一层的橘子的腐烂时间基础之上自增 1，代表时间过了 1 分钟。</li><li>最后检查网格中是否还有新鲜的橘子：<ul><li>有，返回 -1 代表 impossible。</li><li>没有则返回 minute。</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pos</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, minute;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pos</span><span class="params">(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _minute)</span></span>&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">        minute = _minute;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">orangesRotting</span><span class="params">(<span class="keyword">int</span>[][] grid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> R = grid.length;</span><br><span class="line">    <span class="keyword">int</span> C = grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span> minute = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> fresh = <span class="number">0</span>; <span class="comment">//用于记录新鲜的橘子</span></span><br><span class="line">    Queue&lt;Pos&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                queue.add(<span class="keyword">new</span> Pos(i, j, minute));<span class="comment">//找出腐烂的橘子加入队列</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                fresh ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        Pos pos = queue.poll();<span class="comment">//出队</span></span><br><span class="line">        minute = pos.minute; <span class="comment">//当前周期</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> newX = pos.x + dir[i][<span class="number">0</span>]; <span class="comment">//x值增加</span></span><br><span class="line">            <span class="keyword">int</span> newY = pos.y + dir[i][<span class="number">1</span>]; <span class="comment">//y值增加</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(newX &gt;= <span class="number">0</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newX &lt; R &amp;&amp; newY &lt; C &amp;&amp; grid[newX][newY] == <span class="number">1</span>)&#123;</span><br><span class="line">                fresh --; <span class="comment">//新鲜橘子减少</span></span><br><span class="line">                grid[newX][newY] = <span class="number">2</span>; <span class="comment">//标记腐烂</span></span><br><span class="line">                queue.add(<span class="keyword">new</span> Pos(newX, newY, pos.minute + <span class="number">1</span>)); <span class="comment">//周期+1，同一层腐烂的橘子minute是一样的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//check</span></span><br><span class="line">    <span class="keyword">if</span>(fresh != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BFS思想：</p><ul><li>首先创建队列，将每个腐烂橘子的坐标加入队列。</li><li>出队时，将一个腐烂橘子的坐标四个方向遍历4次，碰到新鲜橘子，周期+1，并将其坐标加入队列。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维数组 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序——交换指针法</title>
      <link href="/2020/02/27/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E2%80%94%E2%80%94%E4%BA%A4%E6%8D%A2%E6%8C%87%E9%92%88%E6%B3%95/"/>
      <url>/2020/02/27/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E2%80%94%E2%80%94%E4%BA%A4%E6%8D%A2%E6%8C%87%E9%92%88%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于快速排序其中一种方法的复习，我比较熟悉的是交换指针法，在此记录。</p></blockquote><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>默认将一个数组升序排列。</li><li>设置两个头尾指针和一个基准值，尾指针与基准比较，若大于基准值，则先前移动；若小于，则停下。</li><li>头指针后移动，与基准值比较，若小于基准值，则先后移动；若大于，则停下。</li><li>头尾指针所指向的两个数交换，重复直至头尾指针相等。</li><li>将基准值与俩指针重合位置的数值交换。</li><li>数组被分成小于基准值、基准值、大于基准值三部分，大于和小于部分重复上述动作即可（迭代）。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = low;</span><br><span class="line">    <span class="keyword">int</span> endIndex = high;</span><br><span class="line">    <span class="keyword">int</span> key = arr[index];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[high] &gt; key &amp;&amp; low &lt; high)&#123;</span><br><span class="line">            high --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(arr[low] &lt; key &amp;&amp; low &lt; high)&#123;</span><br><span class="line">            low ++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>(low &lt; high)&#123;</span><br><span class="line">            swap(arr,low, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr,index,high);</span><br><span class="line">    quickSort(arr[], index, high - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr[], high + <span class="number">1</span>, endIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安置路灯</title>
      <link href="/2020/02/26/%E5%AE%89%E7%BD%AE%E8%B7%AF%E7%81%AF/"/>
      <url>/2020/02/26/%E5%AE%89%E7%BD%AE%E8%B7%AF%E7%81%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在某公司校招面试中遇到该题，当时没做出来，记录一下。</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小Q正在给一条长度为n的道路设计路灯安置方案。 为了让问题更简单,小Q把道路视为n个方格,需要照亮的地方用’.’表示, 不需要照亮的障碍物格子用’X’表示。小Q现在要在道路上设置一些路灯, 对于安置在pos位置的路灯, 这盏路灯可以照亮pos - 1, pos, pos + 1这三个位置。小Q希望能安置尽量少的路灯照亮所有’.’区域, 希望你能帮他计算一下最少需要多少盏路灯。</p><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li><p>对于给定的道路长度和道路的构造：<code>11    ...XX....XX</code></p></li><li><p>输出为：<code>3</code></p></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>不需要考虑路灯的位置，设置一个指针i和计数器count，遇到’.’，即<code>count++</code>，有3个区域能被照亮，此时指针i向后移3位；遇到’X’，即表示该位置不需要路灯，指针i向后移一位。</li><li>注意，’X’区域也可放置路灯。该题不要考虑路灯的安置位置，只考虑3个格子只需要放一个路灯，每当碰到障碍，不考虑该格子即可。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lamp</span><span class="params">(<span class="keyword">int</span> len, String s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] c = s.toCharArray();</span><br><span class="line">    <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i] == <span class="string">'.'</span>)&#123;</span><br><span class="line">            i += <span class="number">3</span>;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           i ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 校招面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA面试</title>
      <link href="/2020/02/10/JAVA%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/02/10/JAVA%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>整合网络上一些java面经，挑选自己觉得合适的，内容注重基础，自用！</p></blockquote><a id="more"></a><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p><a href="https://imgchr.com/i/15cVyR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/10/15cVyR.md.png" alt="15cVyR.md.png"></a></p><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>关于位运算我曾写了一篇文章在<a href="https://bruce0hh.github.io/2019/08/31/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E8%BF%90%E7%AE%97/" target="_blank" rel="noopener">《二进制位运算》</a>这，可以在这复习。</p><p><strong>最有效率算出2乘以8等于多少？</strong><br>对于位运算符”&lt;&lt;”,是将一个数左移n位，就相当于乘以了2的n次方，即一个数乘以8即等于将其左移3位即可，位运算是cpu直接支持的，效率最高。<code>2*8 = 2&lt;&lt;3</code>    </p><h3 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h3><ul><li>break：结束并退出当前循环体</li><li>continue：循环体中后续的语句不执行，但是循环没有结束，继续进行循环条件的判断，for还会进行<code>i++</code>操作，continue只是结束本次循环。</li></ul><h3 id="权限修饰符访问权限"><a href="#权限修饰符访问权限" class="headerlink" title="权限修饰符访问权限"></a>权限修饰符访问权限</h3><p><a href="https://imgchr.com/i/1OgkOf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/13/1OgkOf.md.png" alt="1OgkOf.md.png"></a></p><h3 id="类的初始化-方法执行优先级"><a href="#类的初始化-方法执行优先级" class="headerlink" title="类的初始化/方法执行优先级"></a>类的初始化/方法执行优先级</h3><ul><li>父类静态域-&gt;子类静态域-&gt;父类非静态域-&gt;父类构造函数-&gt;子类非静态域-&gt;子类构造函数</li><li>父类 &gt; 子类  静态 &gt; 非静态  </li><li>（非）静态域中包含代码块和静态方法，按顺序执行。</li></ul><h3 id="Java多态"><a href="#Java多态" class="headerlink" title="Java多态"></a>Java多态</h3><p><strong>多态条件</strong></p><ul><li>继承（继承是多态的基础）</li><li>子类重写父类的方法</li><li>父类引用变量指向子类变量（涉及类型转换）</li></ul><h3 id="重写和重载"><a href="#重写和重载" class="headerlink" title="重写和重载"></a>重写和重载</h3><p><a href="https://imgchr.com/i/1ObGxU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/14/1ObGxU.md.png" alt="1ObGxU.md.png"></a></p><h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><p><strong>相同点</strong></p><ul><li>抽象类和接口均包含抽象方法，类必须实现所有的抽象方法，否则是抽象类。</li><li>抽象类和接口都不能实例化，它们位于继承树的顶端，用于被继承和实现。</li></ul><p><strong>区别</strong></p><ul><li><p>接口只能定义全局静态常量，不能定义变量。抽象类中可以定义常量和变量。</p></li><li><p>接口中所有的方法都是全局抽象方法。抽象类中可以有0、1个或多个，甚至全部都是抽象方法。</p></li><li><p>抽象类中可以有构造方法，但不能用来实例化。接口中不能定义构造方法。</p></li><li><p>一个类只能有一个直接父类（可以是抽象类），但可以实现多个接口。一个类使用extends来</p><p>继承抽象类，使用implements来实现接口。</p></li></ul><h3 id="final和abstract"><a href="#final和abstract" class="headerlink" title="final和abstract"></a>final和abstract</h3><ul><li>abstract可以用来修饰类和方法，不能用来修饰属性和构造方法；使用abstract修饰的类是抽象类，需要被继承，使用abstract修饰的方法是抽象方法，需要子类被重写。</li><li>final可以用来修饰类、方法和属性，不能修饰构造方法。使用final修饰的类不能被继承，使用final修饰的方法、变量均不能修改。</li></ul><h3 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Double i1 = <span class="number">100.0</span>;</span><br><span class="line">        Double i2 = <span class="number">100.0</span>;</span><br><span class="line">        Double i3 = <span class="number">200.0</span>;</span><br><span class="line">        Double i4 = <span class="number">200.0</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(i3==i4);<span class="comment">//false</span></span><br><span class="line">         </span><br><span class="line">        Integer a = <span class="number">1</span>;</span><br><span class="line">        Integer b = <span class="number">2</span>;</span><br><span class="line">        Integer c = <span class="number">3</span>;</span><br><span class="line">        Integer d = <span class="number">3</span>;</span><br><span class="line">        Integer e = <span class="number">321</span>;</span><br><span class="line">        Integer f = <span class="number">321</span>;</span><br><span class="line">        Long g = <span class="number">3L</span>;</span><br><span class="line">        Long h = <span class="number">2L</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(c==d);<span class="comment">//true</span></span><br><span class="line">        System.out.println(e==f);<span class="comment">//false</span></span><br><span class="line">        System.out.println(c==(a+b));<span class="comment">//true</span></span><br><span class="line">        System.out.println(c.equals(a+b));<span class="comment">//true</span></span><br><span class="line">        System.out.println(g==(a+b));<span class="comment">//true</span></span><br><span class="line">        System.out.println(g.equals(a+b));<span class="comment">//falsea+b并非long数据类型</span></span><br><span class="line">        System.out.println(g.equals(a+h));<span class="comment">//truea+h,h为long，a自动进行数据转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。所以比较两个由Integer创建的对象，它们是否相等取决数值是否在<strong>[-128,127]</strong>之间。</li><li>注意，Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的。Double、Float的valueOf方法的实现是类似的。</li><li>equals和“==”。equals比较的是值是否相等，而“==”比较的是内存存放对象的地址。</li><li>当 “==”运算符的两个操作数都是包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发<strong>自动拆箱</strong>的过程）。</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="Java引用"><a href="#Java引用" class="headerlink" title="Java引用"></a>Java引用</h3><p><a href="https://imgchr.com/i/1vn8qU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/14/1vn8qU.png" alt="1vn8qU.png"></a></p><p>​    change函数被调用时，第一个形参str接收了类的成员变量str的值，注意这两个str自身都是变量且都指向了堆内存中的String对象”good”，当我们在change函数内部将str指向了另一个String对象”test ok”后，类的成员变量str仍然保持指向”good”，所以最终打印出来就是”good”；对于第二个形参ch，它也是接收了类的成员变量ch的值拷贝，但是ch[0]表示的是字符数组中’a’的地址，修改了它也就修改了字符数组的第一个元素，这个改变在change函数返回之后也会存在。所以本题中两个形参传参的本质区别在于，<strong>修改str只是将形参指向了新的对象，对外部的实参没有任何影响，而修改ch[0]是实实在在的修改了字符数组的首元素</strong>。</p><h3 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h3><ul><li><strong>String s = new String(“a”);创建了几个String对象？</strong><br>两个或一个，“a”对应一个对象，这个对象放在字符串常量缓冲区，常量“a”不管出现多少次，都是缓冲区中的那一个。new String每写一遍，就创建一个新的对象，如果以前就用过“a”，这句就不会创建”a“自己了，直接从缓冲区拿。</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>特点：存取<strong>有序</strong>，可以存储<strong>重复</strong>元素，可以用下标进行元素操作。</li><li><a href="https://imgchr.com/i/1xjVUS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/15/1xjVUS.md.png" alt="1xjVUS.md.png"></a></li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li>特点：元素不重复，存取无序，无下标。</li><li><img src="https://s2.ax1x.com/2020/02/15/1xjy5D.png" alt="1xjy5D.png" style="zoom:150%;"></li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li><p>特点：Map是一个双列集合，其中保存的是键值对，键要求保持唯一性，值可以重复。</p></li><li><p>Map 的实现类有 HashMap、LinkedHashMap、TreeMap、IdentityHashMap、WeakHashMap、Hashtable、Properties 等等。</p></li></ul><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a>ArrayList和LinkedList区别</h4><ul><li>两者都不是线程安全的</li><li>ArrayList底层是Object数组，而LinkedList底层是双向链表</li><li>ArrayList的查询由于使用下标查询所以性能较快（内存地址连续）。LinkedList适合经常增加、删除操作的场景。</li><li>ArrayList的空间花费主要是体现在list结尾会预留一定的容量空间；而LinkedList的空间花费则体现在每个元素需要消耗更多的空间去存储前驱和后继指针。</li></ul><p>线程安全的<strong>List</strong>：<strong>Collections.synchronizedList</strong>与<strong>CopyOnWriteArrayList</strong>。前者是内部添加了synchronized关键字；后者使用了ReentrantLock加锁，在add()操作中，使用原有数组复制一个新的数组，然后将值插入到新的数组中，最后使用新数组替换旧数组，这样就完成插入，该锁只对写-写操作互斥。使用原有数组复制一个新的数组，然后将值插入到新的数组中，最后使用新数组替换旧数组，这样插入就完成了。</p><h4 id="ArrayList的扩容机制"><a href="#ArrayList的扩容机制" class="headerlink" title="ArrayList的扩容机制"></a>ArrayList的扩容机制</h4><p>ArrayList以无参方式构造的时候，初始化赋值为空数组，容量为0；当使用Add()操作时，容量默认为10。当添加到第11个元素时，ArrayList扩容到原来的1.5倍。</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li>JDK1.8之前使用的是数组和链表的结构，通过”拉链法”来处理哈希冲突。JDK1.8之后，改变了部分结构，当链表的长度大于8时，将链表转化为红黑树，减少搜索时间。</li><li>创建时若不指定容量大小，HashMap的初始默认容量是16，每次扩容，容量变为原来的2倍；若指定了初始容量，HashMap会将其扩充为2的幂次方大小。</li><li>HashMap线程不安全，多线程在操作put的过程中，发生了rehash（扩容），此时有可能会使HashMap中产生循环链表。</li></ul><h3 id="CocurrentHashMap"><a href="#CocurrentHashMap" class="headerlink" title="CocurrentHashMap"></a>CocurrentHashMap</h3><ul><li>CocurrentHashMap是线程安全的HashMap，JDK1.8之前使用分段数组+链表的数据结构实现；1.8之后采用了数组+链表/红黑树的结构，和HashMap相同。</li><li>JDK1.8之前使用了segment+分段锁实现线程安全；1.8之后摒弃了segment（继承了ReentrantLock）的概念，直接用Node数组+链表+红黑树来实现，并发控制使用了synchronized+CAS操作。（Node数组：保存key，value和key的hash值的数据结构。其中value和next都用volatile来修饰，保证数据的可见性。）</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h3><ul><li>第一范式(1NF)：所有字段值都是不可分解的原子值。<br><strong>确保每列保持原子性</strong></li><li>第二范式(2NF)：在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一数据库表中。<br><strong>确保表中每列都与主键相关</strong></li><li>第三范式(3NF)：数据表中每一列数据都与主键直接相关，而非间接相关。<ul><li>BCNF：第三范式的一种特殊情况。</li></ul></li><li>第四范式(4NF)：消除表中的多值依赖。</li></ul><p>总结：</p><ul><li>2NF：<strong>属性完全依赖于键。</strong></li><li>3NF：<strong>非键属性不能依赖于非键属性。</strong></li><li>BCNF：<strong>所有属性不能依赖于非键属性。</strong></li></ul><p>$依赖：A→B，可以说B依赖于A。$</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>事务是对数据库中一系列操作进行统一的回滚或提交的操作，主要用来保证数据的完整性和一致性。</p><h4 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h4><ul><li><strong>原子性(Atomicity)</strong>：事务包含的所有操作要么全部成功，要么全部失败回滚。</li><li><strong>一致性(Consistency)</strong>：事务开始前和结束后，数据库的完整性约束没有被破坏。<br><code>A向B转账，不可能A扣钱，而B没有收到。</code></li><li><strong>隔离性(Isolation)</strong>：当多个用户访问数据库时，同一时间，不同事务之间彼此没有干扰。<br><code>A向一张银行卡中取钱，在A取钱过程中，B不能向这张卡转账。</code></li><li><strong>持久性(Durability)</strong>：一旦事务被提交了，那么对数据库中的数据的改变就是永久性的，即便是数据库系统遇到故障的情况下，也不会丢失提交事务的操作。</li></ul><h4 id="并发事务问题（隔离级别问题）"><a href="#并发事务问题（隔离级别问题）" class="headerlink" title="并发事务问题（隔离级别问题）"></a>并发事务问题（隔离级别问题）</h4><ul><li><strong>脏读</strong>：一个事务提交数据，另一个事务访问数据时数据尚未改变。</li><li><strong>不可重复读</strong>：一个事务多次访问数据，中间另一个事务对数据进行修改，两次访问数据不一样。</li><li><strong>幻读</strong>：一个事务读取几行数据，另一个事务插入数据，第一个事务查询时多出了几个数据。</li><li><strong>丢失修改</strong>：一个事务修改数据，另一个事务同时修改数据，数据只被修改一次，第一次事务修改丢失。</li></ul><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><ul><li><strong>读取未提交</strong>：允许读取未提交的事务数据。可能导致脏读、幻读、不可重复读。</li><li><strong>读取已提交</strong>：允许读取并发事务已提交的事务数据，可以避免脏读。</li><li><strong>可重复读</strong>（Mysql默认）：对同一字段多次读取都一样，除非事务自己修改，可以避免不可重复读。</li><li><strong>可串行化</strong>：所有事务依次逐个执行，事务直接不产生干扰，可以避免幻读。</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引的几种类型分别是普通索引、唯一索引、聚集索引、主键索引、全文索引几种。<br><strong>使用索引的优点</strong>：</p><ul><li>提高数据的搜索速度</li><li>加快表与表之间的连接速度</li><li>在信息检索过程中，若使用分组及排序子句进行时，通过建立索引能有效的减少检索过程中所需的分组及排序时间，提高检索效率。</li></ul><p><strong>使用索引的缺点</strong>:</p><ul><li>在我们建立数据库的时候，需要花费的时间去建立和维护索引，而且随着数据量的增加，需要维护它的时间也会增加。</li><li>在创建索引的时候会占用存储空间。在我们需要修改表中的数据时，索引还需要进行动态的维护，所以对数据库的维护带来了一定的麻烦。</li><li>在我们需要修改表中的数据时，索引还需要进行动态的维护，所以对数据库的维护带来了一定的麻烦。</li></ul><p><strong>唯一索引</strong>：在创建唯一索引时要不能给具有相同的索引值。<br><strong>主键索引</strong>：在我们给一个字段设置主键的时候，它就会自动创建主键索引，用来确保每一个值都是唯一的。<br><strong>聚集索引</strong>：我们在表中添加数据的顺序，与我们创建的索引键值相同，而且一个表中只能有一个聚集索引。<br><strong>普通索引</strong>：它的结构主要以B+树和哈希索引为主，主要是对数据表中的数据进行精确查找。<br><strong>全文索引</strong>：它的作用是搜索数据表中的字段是不是包含我们搜索的关键字，就像搜索引擎中的模糊查询。</p><p><strong>索引的数据结构</strong>：</p><ul><li><strong>哈希索引</strong>：底层为哈希表，通过查询哈希值能直接查找到相应的数据。在绝大多数需求为单条记录查询时，可以选择哈希索引，查询性能最快。</li><li><strong>B+Tree索引</strong>：非叶子节点不存储data，只存储索引key；只有叶子节点才存储data。在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了<strong>带有顺序访问指针的B+Tree</strong>。当查找一个区间的记录时，查找到一个节点，可以顺序遍历找到所有节点。这样无需返回上层父节点重复遍历查找减少IO操作，提高了区间的访问性能。</li></ul><p><strong>聚集索引和非聚集索引</strong>：</p><ul><li>聚集索引就是以主键创建的索引；非聚集索引就是以非主键创建的索引。</li><li>聚集索引在叶子节点存储的是表中的数据；非聚集索引在叶子节点存储的是主键和索引列。</li><li>使用非聚集索引查询数据时，拿到叶子上的主键再去查找数据（回表）。</li></ul><p><strong>索引总结</strong>：</p><ul><li>最左前缀匹配原则。</li><li>选择区分度高的列作为索引，字段不重复的比率越大，扫描的记录就越少。</li><li>索引列不能参与计算，尽量保持列”干净”。因为B+树存储的是字段值，进行检索时，需要将所有元素应用成函数才能比较，这样代价太大。</li><li>尽可能扩展索引，而不是新建索引。比如表中已有a的索引，需要（a，b）索引时，只需要修改原来的索引即可。</li><li>单个多列索引和多个单列索引不同。执行SQL时，MySQL只使用一个索引，会从多个单列索引中选择一个最为严格的索引。</li></ul><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="七层协议"><a href="#七层协议" class="headerlink" title="七层协议"></a>七层协议</h3><blockquote><p><strong>应用层、表示层、会话层、传输层、网络层、数据链路层、物理层</strong></p></blockquote><h3 id="TCP-UDP协议"><a href="#TCP-UDP协议" class="headerlink" title="TCP/UDP协议"></a>TCP/UDP协议</h3><ul><li>TCP面向连接，UDP面向无连接。</li><li>TCP面向报文，UDP面向字节流。</li><li>TCP提供可靠传输，UDP不可靠。</li><li>TCP传输协议慢，UDP快。</li><li>TCP对资源要求高，UDP要求低。</li></ul><h3 id="TCP可靠传输"><a href="#TCP可靠传输" class="headerlink" title="TCP可靠传输"></a>TCP可靠传输</h3><ul><li><strong>校验和</strong>：</li><li><strong>流量控制</strong>：</li><li><strong>拥塞控制</strong>：</li><li><strong>超时重传</strong>:</li><li><strong>ARQ协议</strong>：</li></ul><h3 id="Http1-0-2-0区别"><a href="#Http1-0-2-0区别" class="headerlink" title="Http1.0/2.0区别"></a>Http1.0/2.0区别</h3><ul><li>HTTP2.0采用二进制格式而非文本格式。</li><li>HTTP2.0采用多路传输，能同时处理多个消息的响应和请求。</li><li>HTTP2.0采用报头压缩，降低了开销。</li><li>HTTP2.0让服务器的响应主动推送到客户端缓存中。</li></ul><h3 id="浏览器输入URL地址-gt-显示页面过程"><a href="#浏览器输入URL地址-gt-显示页面过程" class="headerlink" title="浏览器输入URL地址==&gt;显示页面过程"></a>浏览器输入URL地址==&gt;显示页面过程</h3><ul><li>DNS解析IP地址</li><li>TCP连接，客户端发送HTTP请求</li><li>服务端接受请求并发送HTTP报文</li><li>浏览器解析渲染页面</li></ul><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><blockquote><p><strong>新建、就绪、阻塞、运行、完成</strong></p></blockquote><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><blockquote><p><strong>新建、运行（就绪）、阻塞、等待、超时等待、完成</strong></p></blockquote><img src="https://img2020.cnblogs.com/i-beta/1552449/202003/1552449-20200308104611380-1171236230.png" alt="img" style="zoom: 67%;"><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul><li>进程是资源分配的最小单位，线程是cpu调度的最小单位。</li><li>进程的系统资源消耗更大，线程开销很小。</li><li>线程切换不会造成进程切换，而进程切换回造成线程切换。</li><li>不同进程之间资源很难共享，而线程之间可以共享线程的堆和方法区。</li><li>一个进程可以包含多个线程，线程必须在进程下运行。</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="四个必要条件"><a href="#四个必要条件" class="headerlink" title="四个必要条件"></a>四个必要条件</h4><ul><li><strong>互斥条件</strong>：资源在任意时刻只由一个线程占用。</li><li><strong>请求与保持条件</strong>：一个线程因资源请求而阻塞时，对已获得的资源保持不变。</li><li><strong>不剥夺条件</strong>：一个线程已获得的资源在未使用完之前不能被其他线程剥夺，只有自己使用完成才能主动释放。</li><li><strong>循环等待条件</strong>：若干个线程之间形成一种头尾相接的循环等待资源关系。</li></ul><h4 id="破坏死锁"><a href="#破坏死锁" class="headerlink" title="破坏死锁"></a>破坏死锁</h4><ul><li>一次性申请所有资源</li><li>当有线程请求资源时，主动释放资源</li><li>有序申请资源</li></ul><h3 id="CAS（Compare-And-Swap）"><a href="#CAS（Compare-And-Swap）" class="headerlink" title="CAS（Compare And Swap）"></a>CAS（Compare And Swap）</h3><blockquote><p>CAS为无锁操作，由于它直接利用了 CPU 层面的指令，所以性能很高。CAS就是用一个预期的值和内存值进行比较，如果两个值相等，就用预期的值替换内存值，并返回 true。否则，返回 false。通过对比较并交换这个过程保证原子操作。</p></blockquote><h4 id="CAS引发的问题"><a href="#CAS引发的问题" class="headerlink" title="CAS引发的问题"></a>CAS引发的问题</h4><ul><li><strong>ABA问题</strong>：一个值从 A 变为 B ，又从 B 变回了 A，这种情况下，CAS 会认为值没有发生过变化，但实际上是有变化的。可以通过加入版本号来解决。</li><li><strong>循环时间过长开销大</strong>：当自旋CAS时间过长，长期占用CPU资源，对性能损耗过大。</li></ul><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><h4 id="JVM底层"><a href="#JVM底层" class="headerlink" title="JVM底层"></a>JVM底层</h4><ul><li><p><strong>同步代码块</strong>：在代码块开始和结束的位置分别使用了<em>monitorenter</em>和<em>monitorexit</em>指令。如果锁的标志位是无锁的话，一个线程就获取锁，计数器加，当线程执行完任务时，计数器就置0，重新回到无锁状态。该过程也是<strong>可重入</strong>的，当同一个对象再次请求锁的时候，计数器会递增，对象获取到该锁，当执行结束时，计数器会递减至0，将锁释放。</p><p>（同步代码块计数器的过程即为锁升级过程）</p></li><li><p><strong>同步方法</strong>：同步方法是使用了ACC_SYNCHRONIZED标识，当JVM通过这个标识是否执行同步调用。</p></li><li><p>同步静态方法和类时，synchronized都是给类加锁；同步方法或对象时是给对象加锁。需要注意的是，给方法加锁是将this对象加锁。</p></li></ul><h4 id="synchronized锁状态"><a href="#synchronized锁状态" class="headerlink" title="synchronized锁状态"></a>synchronized锁状态</h4><ul><li><strong>偏向锁</strong>：偏向锁偏向于第一个获得锁的线程，因为资源一直被一个线程所获得，为了减少获取锁的代价，该线程自动获取锁。只有遇到其他线程竞争锁的时候，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。<strong>当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。</strong></li><li><strong>轻量级锁</strong>：当锁是偏向锁时，被其他线程访问，偏向锁会升级为轻量级锁，其他线程会通过自旋的方式尝试获取锁，不会阻塞，从而提高性能。<strong>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。</strong></li><li><strong>重量级锁</strong>：当自旋次数过多或个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</li></ul><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><h4 id="Lock与Synchronized区别"><a href="#Lock与Synchronized区别" class="headerlink" title="Lock与Synchronized区别"></a>Lock与Synchronized区别</h4><ul><li>synchronized基于JVM，而ReentrantLock基于API。</li><li>ReentrantLock可以设置释放锁的时机，而synchronized只能由程序决定。</li><li>ReentrantLock可以实现公平锁（多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁），默认为非公平锁<code>fair = false</code>。</li><li>ReentrantLock可以实现选择性通知，通过线程对象在Condition的注册，可以对指定的线程进行唤醒。而synchronized相当于所有线程都注册在一个Condition实例上，notifyAll()对所有线程进行唤醒。而Condition的signalAll()只会对注册在Condition实例上的所有等待线程进行唤醒。</li></ul><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><h4 id="volatile与synchronized区别"><a href="#volatile与synchronized区别" class="headerlink" title="volatile与synchronized区别"></a>volatile与synchronized区别</h4><ul><li>volatile只能修饰变量而synchronized可以修饰方法及代码块。</li><li>多线程访问volatile不会发生阻塞，而synchronized可能会。</li><li>volatile用于解决变量在多个线程之间的可见性，synchronized是为了解决多个线程之间访问资源的同步性。</li></ul><h3 id="进程间的通信（IPC）"><a href="#进程间的通信（IPC）" class="headerlink" title="进程间的通信（IPC）"></a>进程间的通信（IPC）</h3><ul><li><strong>匿名管道</strong>：适用于父子进程或兄弟进程，存在于内存文件中。</li><li><strong>有名管道</strong>：可用于无关线程间的通信，FIFO，以磁盘文件方式存在。</li><li><strong>消息队列</strong>：存放在内核中，可以不用FIFO，可以随机读取，也可以按照消息类型读取。</li><li><strong>信号量</strong>：是一个计数器，用于多进程对于共享数据的访问，解决进程间的同步问题。</li><li><strong>共享内存</strong>：使得多个进程访问同一块内存空间，由于多个进程访问，所以需要同步操作。</li><li><strong>socket</strong>：主要用于客户端和服务端通过网络进行通信。</li></ul><h3 id="线程间的同步"><a href="#线程间的同步" class="headerlink" title="线程间的同步"></a>线程间的同步</h3><ul><li><strong>互斥量</strong>：采用互斥对象机制，只有拥有互斥对象的线程才能访问公共资源的权限。例如Lock机制（互斥锁）和synchronized等关键字。</li><li><strong>信号量</strong>：允许同一时刻多个线程访问同一资源，但是需要控制最大线程数。</li><li><strong>事件</strong>：wait/notify等，通过通知操作来保持多线程的同步，可以方便实现多线程的优先级比较操作。</li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h4><ul><li><strong>join()</strong>：例如<strong>t1.join()</strong>，则必须t1线程执行完成后才执行其他线程。<strong>void join(long millis)</strong>参数为等待该线程终止的最大时间。join()内部使用的是wait()方法，所以使用join()会释放锁。</li><li><strong>sleep()</strong>：sleep使线程进入阻塞状态，交出CPU，允许较低优先级的线程获取锁，不会释放锁。执行sleep()方法的线程在指定时间内肯定不会被执行。</li><li><strong>yield()</strong>：yield 方法让当前正在执行的线程进入到就绪状态，让出 CPU 资源给其他同等优先级的线程，也不会释放锁。线程执行完yield()后，有可能马上被执行。</li><li><strong>wait()</strong>：释放持有的对象锁，线程状态由 RUNNING 变为 WAITING，并将当前线程放置到对象的等待队列(WAITING)。（必须配合synchronized使用）</li><li><strong>notify()/notifyAll()</strong>：在目标对象的等待集合中随意选择一个线程 T，将线程 T 从等待队列移到同步队列重新竞争锁，线程状态由 WAITING 变为 BLOCKED。（不立即释放锁，必须等notify方法执行完毕以后，释放了锁，被通知的线程才获得锁）</li></ul><h4 id="sleep方法和wait方法"><a href="#sleep方法和wait方法" class="headerlink" title="sleep方法和wait方法"></a>sleep方法和wait方法</h4><ul><li>sleep方法没有释放锁，而wait方法释放锁。</li><li>wait方法通常用于线程间通信，而sleep通常用于暂停执行。</li><li>wait方法被调用以后，需要别的线程调用同一个对象上的notify方法才会苏醒；或者使用wait(long time)超时自动苏醒。sleep方法执行完成后线程会自动苏醒。</li></ul><h4 id="Excutors实现"><a href="#Excutors实现" class="headerlink" title="Excutors实现"></a>Excutors实现</h4><ul><li><strong>FixedThreadPool</strong>：固定线程数量的线程池。</li><li><strong>SingleThreadExcutor</strong>：只有一个线程的线程池。</li><li><strong>CachedThreadPool</strong>：可根据实际情况调整线程数量的线程池。如果有可复用的线程就优先使用。</li></ul><h4 id="核心参数"><a href="#核心参数" class="headerlink" title="核心参数"></a>核心参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> corePoolSize,//核心线程数，即最小同时可以运行的线程数</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> maximumPoolSize,//当任务队列达到容量时，当前可以同时运行的线程数变为最大线程数</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">long</span> keepAliveTime,//线程数大于核心线程数时，多余线程存活最大时间</span></span></span><br><span class="line"><span class="function"><span class="params">    TimeUnit unit,//线程存活时间单位</span></span></span><br><span class="line"><span class="function"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">    ThreadFactory threadFactory,//执行创建线程所使用的工厂</span></span></span><br><span class="line"><span class="function"><span class="params">    RejectedExecutionHandler handler)</span> </span>&#123;<span class="comment">//饱和策略</span></span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h4><ul><li><strong>ArrayBlockingQueue</strong> 有界队列，遵循FIFO，队列中只有一个ReentrantLock实现线程安全。</li><li><strong>PriorityBlockingQueue</strong> 优先级队列，同样是有界队列，遵循FIFO，优先级由任务的Comparator决定，队列中插入对象的时候，需要重写Comparable接口。</li><li><strong>LinkedBlockingQueue</strong> 无界队列，容易导致OOM；队列有两个锁，对take/put等操作分成两个锁，高并发不如ArrayBlockingQueue。</li><li><strong>SynchronousQueue</strong> 同步队列，直接将任务移交至工作线程而不经过队列。本质只是线程之间移交的机制。</li></ul><h4 id="饱和策略"><a href="#饱和策略" class="headerlink" title="饱和策略"></a>饱和策略</h4><ul><li><strong>AbortPolicy</strong>：抛出RejectedExecutionException来拒绝新任务的处理。</li><li><strong>DiscardPolicy</strong>：不做任何处理抛弃任务。</li><li><strong>DiscardOldestPolicy</strong>：抛弃队列中最早的任务请求。不适合配合优先级队列，这样会使的优先级最高的任务请求被抛弃。</li><li><strong>CallerRunsPolicy</strong>：将任务回退给调用者来执行，执行任务期间，主线程无法提交新任务，从而使工作线程能处理完成任务。如果能接受延迟，并且不想抛弃任何一个任务可以使用该策略。</li></ul><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><blockquote><p>守护线程是指在程序运行的时候在后台提供一种通用服务的线程。</p></blockquote><ul><li>JVM中没有一个在运行的非守护线程，此时JVM会自动退出。那么，可以说，守护线程拥有自动结束生命周期的特性，例如GC进程就是守护进程。</li><li>注意<ul><li>thread.setDaemon(true)必须在thread.start()之前设置。即，不能把正在运行的线程设置为守护线程。</li><li>Daemon线程中产生的线程为Daemon线程。</li><li>Daemon线程不能访问固有资源，因为它可能再访问期间中断。</li><li>Java自带的多线程框架会将守护线程转换为用户线程，所有使用后台线程就不能使用Java的线程池。</li></ul></li></ul><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><h4 id="AQS组件"><a href="#AQS组件" class="headerlink" title="AQS组件"></a>AQS组件</h4><ul><li><strong>CountDownLatch</strong>：CountDownLatch 适用于一个线程去等待多个线程的情况。<ol><li>设置计数器的初始值；</li><li>在等待线程里调用countDownLatch.await()，进入等待状态，直到计数器为0；</li><li>在其他线程里调用countDownLatch.countDown()，该方法会将计数器减一；</li><li>当计数器为0时，等待线程里的countDownLatch.await()会退出，执行后续代码。</li></ol></li><li><strong>CyclicBarrier</strong>: 将所有线程设置为阻塞状态，当最后一个线程到达时，处于阻塞状态的线程恢复执行态。<ol><li>设置计数器的初始值；</li><li>将指定的线程调用cyclicBarrier.await()，等待所有线程完成；</li><li>当所有线程都准备完成后，全部线程同时执行。</li></ol></li><li><strong>Semaphore</strong>: 主要方法为==semaphore.acquire()==和==semaphore.release()==。和线程池的作用相似，但是Semaphore需要手动创建新线程，并且手动获取和释放。</li></ul><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="虚拟机内存区域"><a href="#虚拟机内存区域" class="headerlink" title="虚拟机内存区域"></a>虚拟机内存区域</h3><p><a href="https://imgchr.com/i/tRsEm4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/07/tRsEm4.md.png" alt="tRsEm4.md.png"></a></p><blockquote><p>线程私有：程序计数器、虚拟机栈、本地方法栈</p><p>线程共享：堆、方法区、直接内存</p></blockquote><ul><li><strong>程序计数器</strong>：字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制；在多线程的情况下，程序计数器用于记录当前线程执行的位置。</li><li><strong>虚拟机栈</strong>：虚拟机栈由一个个栈帧组成，每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息等。每次函数调用都有一个栈帧压入java栈，每个函数调用结束后，都会有一个栈帧弹出。</li><li><strong>本地方法栈</strong>：与虚拟机栈作用类似，但是虚拟机栈为虚拟机执行Java方法（字节码）的服务，而本地方法栈为虚拟机执行Native方法服务。（使用native关键字，修饰方法，主要用于与Java环境外或者操作系统的交互）</li><li><strong>堆</strong>：Java内存中最大一块。堆的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。也称<strong>GC堆</strong>，细致划分为新生代（Eden、From Survivor、To Survivor）和老年代。</li></ul><blockquote><p>通常在Eden区和From分配内存，当一次新生代GC后，Eden区仍存活的对象进入To区（初始对象年龄为1），From则根据年龄决定去向，每经过一次Minor GC，对象年龄+1（默认15去老年代），Minor GC一直重复，直至To区被填满，全部移至老年代。</p><p><strong>Full GC触发机制</strong>：</p><ul><li>老年代空间不足</li><li>方法区空间不足</li><li>Minor GC进入老年代的平均大小大于老年代可用内存</li><li>由Eden区、From向To复制时</li><li>永久代满时也会引发Full GC</li></ul></blockquote><ul><li><strong>方法区</strong>：方法区是永久代的实现。$-XX:MetaspaceSize=N$设置Metaspace初始大小，$-XX:MaxMetaspaceSize$设置Metaspace的最大大小。</li><li><strong>直接内存</strong>：直接内存不是虚拟机运行时数据区的一部分，也不是虚拟机规范定义的内存区域。</li></ul><h3 id="Java对象的创建"><a href="#Java对象的创建" class="headerlink" title="Java对象的创建"></a>Java对象的创建</h3><ul><li><strong>类加载执行</strong>：</li><li><strong>分配内存</strong>：</li><li><strong>初始化零值</strong>：</li><li><strong>设置对象头</strong>：</li><li><strong>执行init方法</strong>：</li></ul><p><strong>判断对象死亡</strong>：</p><ul><li><strong>引用计数法</strong>：给对象添加引用计数器，有一个地方引用就+1，当引用失效就-1，为0则死亡。</li><li><strong>可达性算法</strong>：通过$GC Roots$作为起点，从节点向下搜索，界定啊走过的路径为引用链，当对象到GC无路径相连时，则证明该对象不可用。</li></ul><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><ul><li><strong>标记-清除算法</strong>：标记所有对象，全部统一回收。</li><li><strong>复制算法</strong>：（新生代大量对象死去）两块区域使用一块，当一块内存用完，复制到第二块，然后一起清理，减少碎片化问题。</li><li><strong>标记-整理算法</strong>：（老年代特点，对象存活几率较高）只用一块内存，标记所有对象，让所有对象向一端移动，清理边界以外的内存。</li><li><strong>分代收集算法</strong>：分代使用上述算法。</li></ul><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><ul><li><strong>Serial收集器</strong>：</li><li><strong>ParNew收集器</strong>：</li><li><strong>CMS收集器</strong>：</li><li><strong>G1收集器</strong>：</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫基础</title>
      <link href="/2020/02/05/python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/02/05/python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这几天由于疫情在家，抽空复习了一下python爬虫，上次学习已经过了半年多了。这次的学习主要是在这个<a href="https://morvanzhou.github.io/tutorials/data-manipulation/scraping" target="_blank" rel="noopener">网站</a>，最后自己也在网上参考别人写了一个爬虫，仅供复习巩固使用。</p></blockquote><a id="more"></a><h2 id="爬虫基础"><a href="#爬虫基础" class="headerlink" title="爬虫基础"></a>爬虫基础</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line"><span class="comment"># get请求</span></span><br><span class="line">p = &#123;<span class="string">"wd"</span>: <span class="string">"mofan"</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">"https://baidu.com/s"</span>, params=p)</span><br><span class="line">print(r.url)</span><br><span class="line">webbrowser.open(r.url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求</span></span><br><span class="line">p = &#123;<span class="string">'firstname'</span>: <span class="string">'mofan'</span>, <span class="string">'lastname'</span>: <span class="string">'zhou'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://pythonscraping.com/files/processing.php'</span>, data=p)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cookies</span></span><br><span class="line">p = &#123;<span class="string">'username'</span>: <span class="string">' user'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://pythonscraping.com/pages/cookies/welcome.php'</span>, data=p)</span><br><span class="line">print(r.cookies.get_dict())</span><br><span class="line">r = requests.get(<span class="string">'http://pythonscraping.com/pages/cookies/profile.php'</span>, cookies=r.cookies)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Session</span></span><br><span class="line">session = requests.Session()</span><br><span class="line">payload = &#123;<span class="string">'username'</span>: <span class="string">'user'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>&#125;</span><br><span class="line">r = session.post(<span class="string">'http://pythonscraping.com/pages/cookies/welcome.php'</span>, data=payload)</span><br><span class="line">print(r.cookies.get_dict())</span><br><span class="line">r = session.get(<span class="string">"http://pythonscraping.com/pages/cookies/profile.php"</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h2 id="爬虫项目"><a href="#爬虫项目" class="headerlink" title="爬虫项目"></a>爬虫项目</h2><h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>这次主要是为了复习爬虫知识，所以选择了一个静态网页来进行操作。</p><ul><li>首先选择网站，使用request模块获取网页源码，并使用bs4解析源码</li><li>分析源码，找到自己想要的信息在源码的哪个部分，通过bs4利用正则表达式或直接获取你要爬取的数据</li><li>下载你要爬取的数据或者将数据写入文件</li></ul><h3 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h3><h4 id="获取网页源码"><a href="#获取网页源码" class="headerlink" title="获取网页源码"></a>获取网页源码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">            r.raise_for_status()</span><br><span class="line">            r.encoding = r.apparent_encoding</span><br><span class="line">            <span class="keyword">return</span> r.text</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FAPIU"</span></span><br></pre></td></tr></table></figure><p>获取网页，设置响应时间30s；<code>r.encoding</code> 根据响应头中的 <code>charset</code> 判断网站编码，如果没有设置则默认返回 <code>iso-8859-1</code> 编码，而<code>r.apparent_encoding</code>  则通过网页内容来判断其编码。令<code>r.encoding=r.apparent_encoding</code>就不会出现乱码问题。</p><h4 id="获取所有网址"><a href="#获取所有网址" class="headerlink" title="获取所有网址"></a>获取所有网址</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        html = self.get_html(self.url)</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">        tag = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'v_page'</span>&#125;)</span><br><span class="line">        sub_tag = tag.find_all(<span class="string">'a'</span>)</span><br><span class="line">        <span class="keyword">return</span> int(sub_tag[<span class="number">-2</span>].get_text())</span><br></pre></td></tr></table></figure><p>找到末页的页数并记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_urls</span><span class="params">(self, pages)</span>:</span></span><br><span class="line">        url_head = <span class="string">'http://dianying.2345.com/list/----2019---'</span></span><br><span class="line">        url_end = <span class="string">'.html'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, pages+<span class="number">1</span>):</span><br><span class="line">            url = url_head + str(i) + url_end</span><br><span class="line">            self.urls.append(url)</span><br></pre></td></tr></table></figure><p>观察网页规律，拼接所有的网址。</p><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(self,  urls)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            html_content = self.get_html(url)</span><br><span class="line">            soup = BeautifulSoup(html_content, <span class="string">'html.parser'</span>)</span><br><span class="line">            anchor_tag = soup.find(<span class="string">'ul'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'v_picTxt pic180_240 clearfix'</span>&#125;)</span><br><span class="line">            tags = anchor_tag.find_all(<span class="string">'li'</span>)</span><br><span class="line">            <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    item = MovieItem()</span><br><span class="line">                    item.movieName = tag.find(<span class="string">'span'</span>, attrs =&#123;<span class="string">'class'</span>: <span class="string">'sTit'</span>&#125;).get_text().strip()</span><br><span class="line">                    item.movieScore = tag.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'pRightBottom'</span>&#125;).em.get_text().replace(<span class="string">'分:'</span>, <span class="string">''</span>)</span><br><span class="line">                    self.items.append(item)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><p>同上，获取电影名和评分信息，将数据存入到items中。</p><h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, items)</span>:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        file_name = <span class="string">'2019热门电影.txt'</span></span><br><span class="line">        result = <span class="string">"&#123;0:^10&#125;"</span>+<span class="string">" "</span>+<span class="string">"&#123;1:^10&#125;\n"</span></span><br><span class="line">        <span class="keyword">with</span> codecs.open(file_name, <span class="string">'w'</span>, <span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                fp.write(result.format(item.movieName, item.movieScore)+<span class="string">'\n'</span>)</span><br><span class="line">                count = count + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这里写入文件使用了codecs模块，使其不会乱码；另外，还使用了format格式化数据使其对齐。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieItem</span><span class="params">(object)</span>:</span></span><br><span class="line">    movieName = <span class="literal">None</span></span><br><span class="line">    movieScore = <span class="literal">None</span></span><br><span class="line">    movieStaring = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetMovie</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'http://dianying.2345.com/list/----2019--.html'</span></span><br><span class="line">        self.pages = self.get_page()</span><br><span class="line">        self.urls = []</span><br><span class="line">        self.items = []</span><br><span class="line">        self.get_urls(self.pages)</span><br><span class="line">        self.spider(self.urls)</span><br><span class="line">        self.save(self.items)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">            r.raise_for_status()</span><br><span class="line">            r.encoding = r.apparent_encoding</span><br><span class="line">            <span class="keyword">return</span> r.text</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FAPIU"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        html = self.get_html(self.url)</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">        tag = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'v_page'</span>&#125;)</span><br><span class="line">        sub_tag = tag.find_all(<span class="string">'a'</span>)</span><br><span class="line">        <span class="keyword">return</span> int(sub_tag[<span class="number">-2</span>].get_text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_urls</span><span class="params">(self, pages)</span>:</span></span><br><span class="line">        url_head = <span class="string">'http://dianying.2345.com/list/----2019---'</span></span><br><span class="line">        url_end = <span class="string">'.html'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, pages+<span class="number">1</span>):</span><br><span class="line">            url = url_head + str(i) + url_end</span><br><span class="line">            self.urls.append(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(self,  urls)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            html_content = self.get_html(url)</span><br><span class="line">            soup = BeautifulSoup(html_content, <span class="string">'html.parser'</span>)</span><br><span class="line">            anchor_tag = soup.find(<span class="string">'ul'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'v_picTxt pic180_240 clearfix'</span>&#125;)</span><br><span class="line">            tags = anchor_tag.find_all(<span class="string">'li'</span>)</span><br><span class="line">            <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    item = MovieItem()</span><br><span class="line">                    item.movieName = tag.find(<span class="string">'span'</span>, attrs =&#123;<span class="string">'class'</span>: <span class="string">'sTit'</span>&#125;).get_text().strip()</span><br><span class="line">                    item.movieScore = tag.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'pRightBottom'</span>&#125;).em.get_text().replace(<span class="string">'分:'</span>, <span class="string">''</span>)</span><br><span class="line">                    self.items.append(item)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, items)</span>:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        file_name = <span class="string">'2019热门电影.txt'</span></span><br><span class="line">        result = <span class="string">"&#123;0:^10&#125;"</span>+<span class="string">" "</span>+<span class="string">"&#123;1:^10&#125;\n"</span></span><br><span class="line">        <span class="keyword">with</span> codecs.open(file_name, <span class="string">'w'</span>, <span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                fp.write(result.format(item.movieName, item.movieScore)+<span class="string">'\n'</span>)</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    GM = GetMovie()</span><br></pre></td></tr></table></figure><p>注意<code>if __name__ == &#39;__main__&#39;</code>为程序入口</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap+SpringBoot项目总结</title>
      <link href="/2019/12/25/Bootstrap-SpringBoot%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/25/Bootstrap-SpringBoot%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在实验室做了一个小项目，内容主要是对前端开发的一些基本操作，由于自己前端知识较为浅薄，在此记录下整个项目的开发的流程和学习到的知识点。</p></blockquote><a id="more"></a><blockquote><p>2020-1-12：</p><ul><li>准备上线测试才发现前后两端的问题不少</li><li>前后端分开做都没啥问题，交互的时候数据格式需要变换</li><li>诸如此类的细节我将会在这次更新使用ps一一补充说明 </li></ul></blockquote><h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><ul><li>利用日历控件做一个通过日期查询当日记录的所有区块，并以表格形式展示。</li><li>在表格中可以点击查看区块详情，并将区块详情以模态框的形式展示。</li><li>模态框可以上下翻页查看上一个、下一个区块。</li><li>当日区块的表格之下设计一个饼图展示当日区块类型划分。</li></ul><h2 id="项目成果"><a href="#项目成果" class="headerlink" title="项目成果"></a>项目成果</h2><img src="https://s2.ax1x.com/2019/12/25/lFO3Md.png" alt="lFO3Md.png" style="zoom: 67%;"><img src="https://s2.ax1x.com/2019/12/25/lFO6Zq.png" alt="lFO6Zq.png" style="zoom:67%;"><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><h3 id="项目思路"><a href="#项目思路" class="headerlink" title="项目思路"></a>项目思路</h3><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><ul><li>使用datetimepicker做一个包含日历控件的查询按钮，前端使用ajax将值传至服务器。</li><li>服务器将YYYY-MM-DD格式的日期解析，查询“YYYY/MM/DD”文件夹下的所有区块，将所有区块解析后，封装成一个JSONArray返回客户端。</li><li>前端ajax接收json数组后，将数据放入bootstrap-table。</li><li>设计一个详情按钮，读取当前行的索引index，将当前index值的json数据取出，放入模态框中。</li><li>模态框设计两个翻页按钮，对index值进行+-，便可实现翻页功能。</li></ul><h4 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h4><ul><li>点击查询的时候同样使用ajax传值至后台。</li><li>后台依然解析日期，查询“YYYY/MM/DD”文件夹下各个类型文件夹内的文件数量，依然封装成一个JSONArray返回客户端。</li><li>客户端接受数据，使用echarts初始化饼图，配置数据。</li></ul><p>接下来我会按我使用的开源插件各个部分进行说明，本次项目使用的工具是 <strong>IDEA+VSCode+FireFox</strong>。</p><h3 id="Bootstrap-datetimepicker"><a href="#Bootstrap-datetimepicker" class="headerlink" title="Bootstrap datetimepicker"></a>Bootstrap datetimepicker</h3><p>这是我在项目中使用的第一个插件，由于本项目是在原本一个网页基础上改造的，原来使用的是bootstrap v3，我也顺势找了一个符合v3版本的datetimepicker，网上的版本参差不齐，尤其是中文版本不太符合，在做前期工作的时候，我就使用了cdn在线引用地址，插件配置如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span> <span class="attr">style</span>=<span class="string">"width: 16em;"</span> <span class="attr">id</span>=<span class="string">'datetimepicker1'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">id</span>=<span class="string">"searchDate"</span> <span class="attr">class</span>=<span class="string">"form-control datetimepicker-input"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#datetimepicker1'</span>).datetimepicker(&#123;</span><br><span class="line">    format: <span class="string">'YYYY-MM-DD'</span>,</span><br><span class="line">    locale: moment.locale(<span class="string">'zh-cn'</span>),<span class="comment">//设置中文</span></span><br><span class="line">    defaultDate: <span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="comment">//设置默认时间为今天</span></span><br><span class="line">    maxDate:<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="comment">//设置可查询的最晚时间</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//获取datetimepicker输入框中的值</span></span><br><span class="line"><span class="comment">//var date = $('#datetimepicker1').find('input').val()</span></span><br></pre></td></tr></table></figure><p><strong>ps：<code>var date = $(&#39;#datetimepicker1&#39;).find(&#39;input&#39;).val()</code>该语句需要放入点击查询按钮的事件中，否则不会更新。</strong></p><p>中间设置中文的部分需要使用到的是moment.js，也是一个bootstrap常用的插件。</p><p>另外，在datetimepicker中获取&lt;input&gt;框的值与平常的取值不同，需要注意！</p><p><strong>引用的cdn地址可以直接用迅雷等下载器下载！！！</strong></p><p>我一直不知道这个，这次在GitHub下载datetimepicker源码时，发现只有js文件，没有css文件，而需要使用则必须将源码里面的sass或less文件转换成css文件。然而后来发现cdn地址可以直接下载文件。</p><h3 id="Bootstrap-Table"><a href="#Bootstrap-Table" class="headerlink" title="Bootstrap Table"></a><span id="bt">Bootstrap Table</span></h3><p><strong>ps:与后端对接后，前端表格分页对json数据格式更有要求。</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    total:xxx,//xxx为jsonArray的大小</span><br><span class="line">    rows：&#123;</span><br><span class="line">....//jsonArray    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//如果rows不行，可以试试data</span><br><span class="line">//同时注意bootstrap Table中的sidePagination配置项</span><br></pre></td></tr></table></figure><p><strong>后端向前端分页的bootstrap Table传入的数据必须是上述格式。</strong></p><p>这也是一个bootstrap里面一个比较常用的表格插件，对数据导入、展示都非常方便。详细信息如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"blockCharts"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"table"</span> <span class="attr">class</span>=<span class="string">"table text-nowrap"</span> <span class="attr">style</span>=<span class="string">"min-width:150px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将初始化table封装成一个函数</span></span><br><span class="line"><span class="keyword">var</span> InitTable = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//先销毁表格</span></span><br><span class="line">    $(<span class="string">'#table'</span>).bootstrapTable(<span class="string">"destroy"</span>);</span><br><span class="line">    <span class="comment">//初始化表格</span></span><br><span class="line">    $(<span class="string">'#table'</span>).bootstrapTable(&#123;</span><br><span class="line">        url: data,<span class="comment">//数据来源，本地json文件，后台json数据都可以</span></span><br><span class="line">        <span class="comment">//url: 'demo.json'</span></span><br><span class="line">        <span class="comment">//url: '/json'</span></span><br><span class="line">        striped: <span class="literal">true</span>, <span class="comment">// 是否显示行间隔色</span></span><br><span class="line">        <span class="comment">//search : "true",//是否使用自带的搜索框</span></span><br><span class="line">        uniqueId: <span class="string">"ID"</span>,</span><br><span class="line">        pageSize: <span class="string">"5"</span>,<span class="comment">//每页展示数据的数目</span></span><br><span class="line">        pagination: <span class="literal">true</span>, <span class="comment">// 是否分页</span></span><br><span class="line">        pageList: [],<span class="comment">//可选分页数，</span></span><br><span class="line">        <span class="comment">//pageLIst: [5,8,15]</span></span><br><span class="line">        sortable: <span class="literal">true</span>, <span class="comment">// 是否启用排序</span></span><br><span class="line">        locale: <span class="string">"zh-CN"</span>,</span><br><span class="line">        <span class="comment">//显示时background-color白灰相间</span></span><br><span class="line">        columns: [&#123;</span><br><span class="line">            field: <span class="string">'name'</span>,<span class="comment">//json的key值</span></span><br><span class="line">            title: <span class="string">'区块名'</span>,</span><br><span class="line">            <span class="comment">//将数据过长的部分以省略号显示</span></span><br><span class="line">            cellStyle : <span class="function"><span class="keyword">function</span>(<span class="params">value, row, index, field</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    css: &#123;</span><br><span class="line">                        <span class="string">"min-width"</span>: <span class="string">"150px"</span>,</span><br><span class="line">                        <span class="string">"white-space"</span>: <span class="string">'nowrap'</span>,</span><br><span class="line">                        <span class="string">"text-overflow"</span>: <span class="string">'ellipsis'</span>,</span><br><span class="line">                        <span class="string">"overflow"</span>: <span class="string">'hidden'</span>,</span><br><span class="line">                        <span class="string">"max-width"</span>:<span class="string">"200px"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//鼠标悬浮时显示全称</span></span><br><span class="line">            formatter:<span class="function"><span class="keyword">function</span>(<span class="params">value,row,index,field</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>)</span><br><span class="line">                span.setAttribute(<span class="string">'title'</span>,value)</span><br><span class="line">                span.innerHTML = value</span><br><span class="line">                <span class="keyword">return</span> span.outerHTML</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="comment">//操作按钮</span></span><br><span class="line">            field: <span class="string">'Button'</span>,</span><br><span class="line">            title: <span class="string">'操作'</span>,</span><br><span class="line">            events: operateEvents,</span><br><span class="line">            formatter: AddFunctionAlty,</span><br><span class="line">        &#125;, </span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> InitTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>在这里我需要对表格的数据进行读取，我设计了一个详情按钮，在这里添加事件处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意这里的data-toggle和data-target属性</span></span><br><span class="line"><span class="comment">//data-target必须与模态框的id相匹配</span></span><br><span class="line"><span class="comment">//data-toggle则是说明数据展示组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddFunctionAlty</span>(<span class="params">value,row,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>[</span><br><span class="line">        <span class="string">'&lt;button id="TableDetail" type="button" class="btn btn-info" data-toggle="modal" data-target="#detailModal"&gt;详 情&lt;/button&gt;'</span></span><br><span class="line">    ].join(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里是设计一个全局变量，在翻页时候还需要这个变量</span></span><br><span class="line"><span class="keyword">var</span> bcNum = <span class="number">0</span></span><br><span class="line"><span class="built_in">window</span>.operateEvents = &#123;</span><br><span class="line">    <span class="string">"click #TableDetail"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e,value,row,index</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//将js变量添加到html中的方式！！！</span></span><br><span class="line">        $(<span class="string">"#td1"</span>).text(bc[index].name);</span><br><span class="line">        $(<span class="string">"#td2"</span>).text(bc[index].时间戳);</span><br><span class="line">        $(<span class="string">"#td3"</span>).text(bc[index].交易码);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要是通过获取index索引，获取json数组该下标的json数据。另外注意，这里使用<code>$(&quot;#td1&quot;).text(bc[index].name)</code> 这种方式将js里的变量注入到html&lt;td&gt;标签中，后面会再次说明。</p><h3 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h3><p>与官网上的代码几乎一致。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"detailModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>详细信息<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"fm"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover table-bordered"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'td1'</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>yyy<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'td2'</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>zzz<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'td3'</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"pervious"</span> <span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"next"</span><span class="attr">class</span>=<span class="string">"page-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模态框这里我在里面使用了表格form而不是使用table，是因为点击“详情”按钮之后就可以获取单个json数据，而在这使用bootstrap-table则显得过于繁杂了。<strong>这里的&lt;td&gt;标签通过添加id属性使得可以将js变量注入。</strong><code>$(&#39;#id&#39;).text(variables)</code></p><h4 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="string">"#pervious"</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     bcNum -= <span class="number">1</span></span><br><span class="line">     <span class="keyword">if</span>(bcNum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> bcNum += <span class="number">1</span> </span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         $(<span class="string">"#td1"</span>).text(bc[bcNum].name);</span><br><span class="line">         $(<span class="string">"#td2"</span>).text(bc[bcNum].时间戳);</span><br><span class="line">         $(<span class="string">"#td3"</span>).text(bc[bcNum].交易码);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line">$(<span class="string">"#next"</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    bcNum += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(bcNum &gt; bc.length - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> bcNum -= <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">"#td1"</span>).text(bc[bcNum].name);</span><br><span class="line">        $(<span class="string">"#td2"</span>).text(bc[bcNum].时间戳);</span><br><span class="line">        $(<span class="string">"#td3"</span>).text(bc[bcNum].交易码);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>自己稍微做了一下翻页，不知是否繁琐，运行倒是没啥问题。通过index赋予全局变量，在click事件中进行索引的变换。</p><h3 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h3><p>为了实现饼图，就使用了echarts插件，官网的内容很全，api、各项配置均可查，非常详细。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myPie = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'pie'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    title : &#123;</span><br><span class="line">        text: <span class="string">'今日类型分布'</span>,</span><br><span class="line">        x: <span class="string">'left'</span>,<span class="comment">//标题出现的相对方位</span></span><br><span class="line">        padding: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123; <span class="comment">//鼠标悬浮</span></span><br><span class="line">        trigger: <span class="string">'item'</span>, <span class="comment">// 显示该扇形名称</span></span><br><span class="line">        formatter: <span class="string">"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span> <span class="comment">//显示的数据格式</span></span><br><span class="line">    &#125;,</span><br><span class="line">    series : [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'访问来源'</span>,</span><br><span class="line">            type: <span class="string">'pie'</span>,</span><br><span class="line">            radius : <span class="string">'55%'</span>,<span class="comment">//半径</span></span><br><span class="line">            center: [<span class="string">'40%'</span>, <span class="string">'60%'</span>],<span class="comment">//圆心在容器中的相对位置 </span></span><br><span class="line">            data:pieJSON,<span class="comment">//数据</span></span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">                emphasis: &#123;</span><br><span class="line">                    shadowBlur: <span class="number">10</span>,</span><br><span class="line">                    shadowOffsetX: <span class="number">0</span>,</span><br><span class="line">                    shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//为了和表格同时出现，可以将数据加载放在查询函数里</span></span><br><span class="line">myPie.setOption(option);</span><br></pre></td></tr></table></figure><p><strong>ps：以上代码最后全部放入success函数中。</strong></p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p><strong>ps：和后台对接后，这里的修改是最多的，也是整个项目的重点。由于修改的部分较多，下面列项说明。</strong></p><ul><li><p>由于我们需要在点击“详情”后，将从后端获取的JSON数据载入到模态框中，所以我们需要创建bc变量存储后端传来的jsonData。</p></li><li><p>为了保证数据的稳定性，不让其变化，需要将ajax配置为同步传输，<code>sync:false</code>。</p></li><li><p>data配置项将以json形式传递，但dataType却需要改成’text’。</p></li><li><p>bootstrap Table需要以<code>$(&#39;#table&#39;).bootstrapTable(&#39;load&#39;, jsonData);</code>这种形式加载，否则表格渲染不出来。</p></li><li><p>bootstrap Table前端分页的话，后端的数据格式请参考<a href="#bt">Bootstrap Table</a>，<code>bc= jsonData.rows</code>这个能直接获取rows下的jsonArray。</p></li><li><p>echarts饼图的数据需要<code>parseJSON()</code>函数解析，否则图表数据显示不正常。echarts中data数据格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name:xxx,value:xxx</span><br><span class="line">    name:xxx,value:xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>谨记：name中不要包含数字！！！</p></li><li><p>为了当数据为0时，饼图不显示该数据（包括标识线及文字），在后端给value赋值时，将<code>value = 0</code>转换成<code>value = null</code>。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里还是创建全局变量，以供后面使用</span></span><br><span class="line"><span class="keyword">var</span> bc = <span class="literal">null</span></span><br><span class="line"><span class="keyword">var</span> pieJSON = <span class="literal">null</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取日历控件日期</span></span><br><span class="line">    <span class="keyword">var</span> date = $(<span class="string">'#datetimepicker1'</span>).find(<span class="string">'input'</span>).val()</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    $(<span class="string">"#searchButton"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//在点击查询后，接收数据成功后再进行表格和饼图的初始化</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            sync:<span class="literal">false</span>,<span class="comment">//为了将后台传过来的数据作为全局变量存储，需要使用同步传输</span></span><br><span class="line">            url: <span class="string">"/blockDate"</span>,</span><br><span class="line">            data: &#123;<span class="attr">date</span>:date&#125;,<span class="comment">//前者是后端接收参数名，后者是变量</span></span><br><span class="line">            success(jsonData)&#123;</span><br><span class="line">                <span class="keyword">if</span>(jsonData == <span class="literal">null</span>)&#123;</span><br><span class="line">                    alert(<span class="string">"该日暂无数据！"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                bc = jsonData.rows<span class="comment">//这里涉及到bootstrap table传入的数据格式问题</span></span><br><span class="line">                InitTable(jsonData)</span><br><span class="line">                $(<span class="string">'#table'</span>).bootstrapTable(<span class="string">'load'</span>, jsonData);<span class="comment">//没和后端对接前，没用这种方法加载表格</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">"/pieData"</span>,</span><br><span class="line">            data: &#123;<span class="attr">date</span>:date&#125;,<span class="comment">//同上</span></span><br><span class="line">            dataType: <span class="string">"text"</span>,<span class="comment">//设置为JSON无法传入后端</span></span><br><span class="line">            success(pie)</span><br><span class="line">            <span class="comment">//pieJSON = pie;//未接入后端可直接赋值</span></span><br><span class="line">                pieJSON = $.parseJSON(pie);<span class="comment">//接入后端后需要parseJSON解析json数据</span></span><br><span class="line">            .......<span class="comment">//这里放入饼图的代码</span></span><br><span class="line">                myPie.setOption(option);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)     </span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>这里点击后，创建两个ajax我之前是没有想到的，还是挺巧妙的。这样可以在后台通过两个方法去查询两个不同的json数组返回前端。</p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p>后台我就贴一下和ajax相关的代码，里面具体的方法就不详细说了。饼图的类似，以上。</p><p><strong>ps：此前代码几乎完全错误，在此修正。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/blockDate"</span>,method = RequestMethod.POST)</span><br><span class="line">JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONObject <span class="title">QueryDate</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取date参数</span></span><br><span class="line">    String date=request.getParameter(<span class="string">"date"</span>);</span><br><span class="line">    </span><br><span class="line">    JSONObject jsoc=<span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsoc.put(<span class="string">"total"</span>, jsonArray.size());</span><br><span class="line">    jsoc.put(<span class="string">"rows"</span>, jsonArray.toString());</span><br><span class="line">    <span class="keyword">return</span> jsoc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestMapping注解处理地址请求的映射，value属性指向地址，我这使用了post方法。<del>@RequestParam是接收前台传入的参数。</del>最后是使用了request来获取前台传入的参数。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次项目摸了很久，<del>最后几天一鼓作气就完成了。这次项目的内容还是大多数来自于前端，对于前端我了解的还是比较少，上手还是比较慢，这次用了JQuery感觉还是很不错的，前端倒也是蛮有趣的。</del>还得继续加油！~</p><p>测试到上线花了将近一周的时间，改了诸多bug，当前后端交互的时候，还是很容易出现问题的，着实不易！辛苦啦~</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小的k个数</title>
      <link href="/2019/09/26/%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"/>
      <url>/2019/09/26/%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入n个整数，找出其中最小的k个数。例如输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>边界值测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>快速选择算法：利用快速排序的partition()方法，会返回一个整数j使得a[l…j-1]小于等于a[j]，且a[j+1…h]大于等于a[j]，此时a[j]就是数组的第j大元素。</li><li>采用PriorityQueue实现大小顶堆解决topK问题。应该使用大顶堆来维护最小堆，而不能直接创建一个小顶堆并设置一个大小，企图让小顶堆的元素都是最小元素。</li><li>维护一个大小为K的最小堆过程：在添加一个元素之后，如果大顶堆的大小大于K，那么需要将大顶堆的堆顶元素去除。</li><li>PriorityQueue：一个基于优先级堆的无界优先级队列。优先级队列的元素按照其自然顺序进行排序。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="快速选择算法"><a href="#快速选择算法" class="headerlink" title="快速选择算法"></a>快速选择算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayLisst&lt;Integer&gt; <span class="title">GetLeastNum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(k &gt; nums.length || k &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    findKthSmallest(nums, k - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">        ret.add(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findKthSmallest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>, high = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = partition(nums, low, high);</span><br><span class="line">        <span class="keyword">if</span>(j == k)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &gt; k)&#123;</span><br><span class="line">            high = j - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            low = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = nums[low];</span><br><span class="line">    <span class="keyword">int</span> i = low, j = high + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i != high &amp;&amp; nums[i] &lt; p)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span>(j != low &amp;&amp; nums[j] &gt; p)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        swap(nums, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums, i, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法较快，时间复杂度是<code>O(N)+O(1)</code>，而且该算法只有当允许修改数组元素时才能使用。</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findKSmallest(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)&#123;</span><br><span class="line">   <span class="keyword">if</span>(k &lt; nums.length || k &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *PriorityQueue默认自然排序，要找最小的k个数需要使用大顶堆。</span></span><br><span class="line"><span class="comment">    *构建大顶堆则需要重写compare方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//PriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; o2 - o1);</span></span><br><span class="line">    PriorityQueue&lt;Integer&gt; maxHeap =</span><br><span class="line">                <span class="keyword">new</span> PriorityQueue&lt;&gt;(k, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">        maxHeap.add(num);</span><br><span class="line">        <span class="keyword">if</span>(maxHeap.size() &gt; k)</span><br><span class="line">        maxHeap.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(maxHeap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度是<code>O(NlogK)+O(K)</code>，该算法特别适合处理海量数据。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中出现次数超过一半的数字</title>
      <link href="/2019/09/25/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2019/09/25/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1, 2, 3, 2, 2, 2, 5, 4, 2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>数字次数超过一半，则说明：该数字出现的次数比其他数字之和还多。</li><li>遍历数组过程中保存两个值：一个是数组中某一数字，另一个是次数。遍历到下一个数字时，若与保存数字相同，则次数加1，反之减1。若次数=0，则保存下一个数字，次数重新设置为1。由于要找的数字出现的次数比其他数字之和还多，那么要找的数字肯定是最后一次把次数设置为1的数字。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(array == <span class="keyword">null</span> || array.length &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            num = array[i];</span><br><span class="line">            count++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i] == num)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> val : array)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val == num)&#123;</span><br><span class="line">                times++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(times &gt; array.length / <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串的排列</title>
      <link href="/2019/09/25/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
      <url>/2019/09/25/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个字符串，打印出该字符串中字符的所有排列。例如输入字符串abc，则打印出由字符a、b、c所能排列出来的所有字符串abc、acb、bac、bca、cab和cba。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>将字符串视为两部分，一部分为第一个字符，第二部分是剩下的字符。整个字符串的排列就是交换第一个字符和后面的字符串。这时，我们仍把后面的字符串分成两部分，这样就是典型的递归思路。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">Permutation</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayLIst&lt;String&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(str.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">   premutationCore(str.toCharArray(), <span class="number">0</span>, ret);</span><br><span class="line">    Collections.sort(ret);<span class="comment">//排序ret中的字符</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">premutationCore</span><span class="params">(<span class="keyword">char</span>[] strArray, <span class="keyword">int</span> index, ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断是否含有重复字符</span></span><br><span class="line">    <span class="keyword">if</span>(index == strArray.length - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!list.contains(String.valueOf(strArray)))&#123;</span><br><span class="line">            list.add(String.valueOf(strArray));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; strArray.length; i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp == strArray[index];</span><br><span class="line">            strArray[index] = strArray[i];</span><br><span class="line">            strArray[i] = temp;</span><br><span class="line">            premutationCore(strArray, index + <span class="number">1</span>, list);</span><br><span class="line">strArray[i] = strArray[index];</span><br><span class="line">            strArray[index] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化二叉树</title>
      <link href="/2019/09/25/%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2019/09/25/%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现两个函数，分别用来序列化和反序列化二叉树。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>只用前序遍历即可确定一个二叉树，将空节点(null)输出为”#”符号即可。</li><li>反序列化也使用前序遍历，遍历到一个数字就创建一个节点。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerilalizeBinaryTrees</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">        TreeNode right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Serialize</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.val + <span class="string">" "</span> + Serialize(root.left) + <span class="string">" "</span> + Serialize(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">Deserialize</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length() == <span class="number">0</span> || str == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = str.indexOf(<span class="string">" "</span>);</span><br><span class="line">        String node = index == -<span class="number">1</span> ? str : str.substring(<span class="number">0</span>,index);</span><br><span class="line">        str = index == -<span class="number">1</span> ? <span class="string">""</span> : str.substring(index + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(node.equals(<span class="string">"#"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> val = Integer.valueOf(node);</span><br><span class="line">        TreeNode tree = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        tree.left = Deserialize(str);</span><br><span class="line">        tree.right = Deserialize(str);</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树与双向链表</title>
      <link href="/2019/09/25/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/09/25/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>在搜索二叉树中，左子节点的值总是小于父节点的值，右子节点的值总是大于父节点的值。不难发现，使用二叉树的中序遍历出来的数据顺序就是排序的顺序。</li><li>在将二叉搜索树转换成双向链表的时候，原先指向左子节点的指针调整为链表中指向前一个节点的指针，原先指向右子节点的指针调整为链表中指向后一个节点的指针。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> TreeNode head = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">Convert</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    inOrder(root);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    inOrder(node.left);</span><br><span class="line">    node.left = pre;</span><br><span class="line">    <span class="keyword">if</span>(pre != <span class="keyword">null</span>)&#123;</span><br><span class="line">        pre.right = node;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = node;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    inOrder(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂链表的复制</title>
      <link href="/2019/09/24/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
      <url>/2019/09/24/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现函数ComplexListNode* Clone(ComplexListNode* pHead)，复制一个复杂链表。在复杂链表中，每个结点除了有一个m_pNext指针指向下一个点外，还有一个m_pSibling 指向链表中的任意结点或者nullptr。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先复制节点N创建节点N’，将N’链接到N后面；而根据原始节点N的sibling可以快速设置N’节点sibling的位置。最后根据奇偶的位置将这个长链表拆分成原始链表和复制链表。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComplexListNdoe</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ComplexListNode next = <span class="keyword">null</span>;</span><br><span class="line">    ComplexListNode sibling = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    ComplexListNode(<span class="keyword">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ComplexListNode <span class="title">cloneList</span><span class="params">(ComplexListNode head)</span></span>&#123;</span><br><span class="line">    cloneNodes(head);</span><br><span class="line">    connectSiblingNodes(head);</span><br><span class="line">    <span class="keyword">return</span> reconnectNodes(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cloneNodes</span><span class="params">(ComplexListNode head)</span></span>&#123;</span><br><span class="line">    ComplexListNode p = head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">        ComplexListNode clonedNode = <span class="keyword">new</span> ComplexListNode(p.val);</span><br><span class="line">        clonedNode.next = p.next;</span><br><span class="line">        p.next = clonedNode;</span><br><span class="line">        p = clonedNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cloneNodes</span><span class="params">(ComplexListNode head)</span></span>&#123;</span><br><span class="line">    ComplexListNode p = head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p.sibling != <span class="keyword">null</span>)&#123;</span><br><span class="line">            p.next.sibling = p.sibling.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ComplexListNode <span class="title">reconnectNodes</span><span class="params">(ComplexListNode head)</span></span>&#123;</span><br><span class="line">    ComplexListNode clonedHead = <span class="keyword">null</span>;</span><br><span class="line">    CompleaListNode cloneNode = <span class="keyword">null</span>;</span><br><span class="line">    ComplexListNode p = head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">        cloneHead = head.next;</span><br><span class="line">        cloneNode = p.next;</span><br><span class="line">        p.next = cloneNode.next;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">        cloneNode.next = p.next;</span><br><span class="line">        cloneNode = cloneNode.next;</span><br><span class="line">        p.next = clonedNode.next;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clonedHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树中和为某一值的路径</title>
      <link href="/2019/09/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/09/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一棵二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>记录目标值target，每当遍历到一个节点时，令<code>target -= node.val</code>，当target的值为0时，即可输出路径。</li><li>注意：在当前节点访问结束之后，递归函数将会返回到父节点，所以在函数退出之前，需要删除链表中的当前节点，确保返回到父节点时，存储的路径恰好是根节点到父节点。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; pathList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; findPath(TreeNode root, <span class="keyword">int</span> target)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    printPath(root, target, list);</span><br><span class="line">    <span class="keyword">return</span> pathList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printPath</span><span class="params">(TreeNode node, <span class="keyword">int</span> target, ArayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    list.add(node.val);</span><br><span class="line">    target -= node.val;</span><br><span class="line">    <span class="keyword">if</span>(target == <span class="number">0</span> &amp;&amp; node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">        pathList.add(<span class="keyword">new</span> ArrayList&lt;&gt;(list));</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        printPath(node.left, target, list);</span><br><span class="line">        printPath(node.right, target, list);</span><br><span class="line">    &#125;</span><br><span class="line">    list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树的后序遍历序列</title>
      <link href="/2019/09/22/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
      <url>/2019/09/22/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回true，否则返回false。假设输入的数组的任意两个数字都互不相同。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>二叉树的后序遍历数组的最后一个数为根节点，小于根节点的数在前面(左子树)，大于根节点的数在后面(右子树)。</li><li>先判断左右子树的位置，再用递归函数判断左右子树是否为后序遍历。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifySquence</span><span class="params">(<span class="keyword">int</span>[] sequence)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sequence == <span class="keyword">null</span> || sequence.length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> verifyCore(sequence, <span class="number">0</span>, sequence.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verifyCore</span><span class="params">(<span class="keyword">int</span>[] sequence, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &gt;= end)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//左子树</span></span><br><span class="line">    <span class="keyword">int</span> mid = start;</span><br><span class="line">    <span class="keyword">while</span>(sequence[mid] &lt; sequence[end])&#123;</span><br><span class="line">        mid++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//右子树</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid; i &lt; end; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sequence[i] &lt; sequence[end])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> verifyCore(sequence, start, mid - <span class="number">1</span>) &amp;&amp; verifyCore(sequence, mid, end - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从上到下打印二叉树</title>
      <link href="/2019/09/22/%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2019/09/22/%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><strong>不分行从上到下打印二叉树</strong>：从上往下打印出二叉树的每个结点，同一层的结点按照从左到右的顺序打印。</li><li><strong>分行从上到下打印二叉树</strong>：从上到下按层打印二叉树，同一层的结点按从左到右的顺序打印，每一层打印到一行。</li><li><strong>之字形打印二叉树</strong>：请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</li></ul><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>特殊输入测试</li><li>功能测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>结点满足先进先出的原则，故使用队列来进行层次遍历二叉树。每从队列中取出头部节点并打印，若其有子节点，则将子节点放入队列尾部，直到所有节点打印完毕。不需要使用两个队列分别存储当前层的节点和下一层的节点，因为在开始遍历一层的节点时，当期队列中的节点数就是当前层的节点数，只要控制遍历这么多节点数，就能保证这次遍历的都是当前层的节点。</li><li>同样使用队列，但是需要记录当前层的节点数目，以及下一层节点数。根据当前层的节点数来打印当前层节点，同时计算下一层节点数，之后令当前层节点数=下一层节点数，重复循环，打印完毕。</li><li>采用两个栈来实现操作。在打印某一行节点时，把下一层的子节点保存到相应的栈里。如果当前打印的是奇数层，则先保存左子树节点再保存右子树节点到第一个栈里。如果是偶数层，则逆向存储。打印出来正好是相反方向。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="不分行"><a href="#不分行" class="headerlink" title="不分行"></a>不分行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    TreeNode node = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(queue.size() != <span class="number">0</span>)&#123;</span><br><span class="line">        node = queue.poll();</span><br><span class="line">        System.out.println(node.val + <span class="string">" "</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)</span><br><span class="line">            queue.offer(node.left);</span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)</span><br><span class="line">            queue.offer(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分行"><a href="#分行" class="headerlink" title="分行"></a>分行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    </span><br><span class="line">    TreeNode node = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> pCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> nCount = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        pCount = nCount;</span><br><span class="line">        nCount = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pCount; i+=)&#123;</span><br><span class="line">            node = queue.poll();</span><br><span class="line">            System.out.println(node.val + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.offer(node.left);</span><br><span class="line">                nCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.offer(node.right);</span><br><span class="line">                nCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="之字形"><a href="#之字形" class="headerlink" title="之字形"></a>之字形</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">TreeNode node = <span class="keyword">null</span>;</span><br><span class="line">    stack1.push(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!stack1.empty() || !stack2.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack1.empty())&#123;</span><br><span class="line">            node = stack1.pop();</span><br><span class="line">            System.out.println(node.val + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)</span><br><span class="line">                stack2.push(node.left);</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)</span><br><span class="line">                stack2.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!stack2.empty())&#123;</span><br><span class="line">            node = stack2.pop();</span><br><span class="line">            System.out.println(node.val + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)</span><br><span class="line">                stack1.push(node.right);</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)</span><br><span class="line">                stack1.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的压出、弹出序列</title>
      <link href="/2019/09/14/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%87%BA%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"/>
      <url>/2019/09/14/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%87%BA%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1、2、3、4、5是某栈的压栈序列，序列4、5、3、2、1是该压栈序列对应的一个弹出序列，但4、3、5、1、2就不可能是该压栈序列的弹出序列。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>判断一个序列是不是弹出序列的规律：如果下一个弹出的数字刚好是栈顶数字，那么直接弹出；如果下一个弹出的数字不在栈顶，则把压栈序列中还没有入栈的数字都压入辅助栈，直到把下一个需要弹出的数字压入栈顶为止；如果所有数字都压入栈后仍然没有找到下一个弹出的数字，那么该序列不可能是一个弹出序列。</li><li>建立一个栈，按照压栈序列依次进行入栈操作，按出栈序列的顺序依次弹出数字。在出栈时，若下一个要出栈的数字与栈顶数字相同则弹出。如果压栈序列中的所有数字都入栈后没有完全出栈成功则代表两个序列不匹配，返回false。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPopOrder</span><span class="params">(<span class="keyword">int</span>[] pushA, <span class="keyword">int</span>[] popA)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pushA == <span class="keyword">null</span> || popA == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(popA.length != popA.length || pushA.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> popIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pushIndex = <span class="number">0</span>; pushIndex &lt; pushA.length; pushIndex++)&#123;</span><br><span class="line">        stack.push(pushA[pushIndex]);</span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() &amp;&amp; stack.peek() == popA[popIndex])&#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">            popIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 辅助栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包含min函数的栈</title>
      <link href="/2019/09/13/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
      <url>/2019/09/13/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的min函数。在该栈中，调用min、push及pop的时间复杂度都是O(1)。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>新压入栈的数字比之前最小值大。</li><li>新压入栈的数字比之前最小值小。</li><li>弹出栈的数字不是最小元素。</li><li>弹出栈的数字是最小元素。</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>使用两个stack，一个为数据栈，另一个为辅助栈。数据栈用于存储所有数据，辅助栈用于存放最小值。</li><li>将数据压入栈时，把每次的最小值(之前元素的最小值和新入栈元素的较小值)保存起来放到辅助栈中。</li><li>例：栈<code>[3,4,2,5,1]</code>    辅助栈<code>[3,3,2,2,1]</code></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackWithMin</span></span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack_data = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack_min = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span></span>&#123;</span><br><span class="line">        stack_data.push(node);</span><br><span class="line">        <span class="keyword">if</span>(stack_min.empty() || stack_min.peek() &gt; node)&#123;</span><br><span class="line">            stack_min.push(node);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack_min.push(stack_min.peek());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!stack_data.empty())&#123;</span><br><span class="line">            stack_data.pop();</span><br><span class="line">            stack_min.min();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack_min.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 辅助栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺时针打印矩阵</title>
      <link href="/2019/09/13/%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
      <url>/2019/09/13/%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>数组中多行多列</li><li>数组中一行一列</li><li>数组中只有一行或只有一列</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>将结果存入数组中，先从左到右，再从上到下，再从右到左，最后从下到上遍历。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span></span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> r1 = <span class="number">0</span>, r2 = matrix.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c1 = <span class="number">0</span>, c2 = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//循环遍历-</span></span><br><span class="line">    <span class="keyword">while</span>(r1 &lt;= r2 &amp;&amp; c1 &lt;= c2)&#123;</span><br><span class="line">        <span class="comment">//从左到右</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = c1; i &lt;= c2; i++)&#123;</span><br><span class="line">            ret.add(matrix[r1][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从上到下</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r1 + <span class="number">1</span>; i &lt;= r2; i++)&#123;</span><br><span class="line">            ret.add(matrix[i][c2]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从右到左</span></span><br><span class="line">        <span class="keyword">if</span>(r1 != r2)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = c2 - <span class="number">1</span>; i &gt;= c1; i--)&#123;</span><br><span class="line">                ret.add(matrix[r2][i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从下到上</span></span><br><span class="line">        <span class="keyword">if</span>(c1 != c2)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = r2 - <span class="number">1</span>; i &gt; r1; i--)&#123;</span><br><span class="line">                ret.add(matrix[i][c1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一圈结束</span></span><br><span class="line">        r1++;</span><br><span class="line">        r2--;</span><br><span class="line">        c1++;</span><br><span class="line">        c2--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对称的二叉树</title>
      <link href="/2019/09/11/%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2019/09/11/%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>二叉树遍历算法通常都是先遍历左子节点，再遍历右子节点。以前序遍历为例，我们可以定义一个算法，先遍历右子节点，再遍历左子节点。称其为对称前序遍历。</li><li>通过比较二叉树的前序遍历和对称前序遍历来判断二叉树是不是对称的。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> isSymmetrical(p.left, p.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode t1, TreeNode t2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(t1 == <span class="keyword">null</span> || t2 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(t1.val != t2.val)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> isSymmetrical(t1.left, t2.right) &amp;&amp; isSymmetrical(t1.right, t2.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的镜像</title>
      <link href="/2019/09/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
      <url>/2019/09/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>对输入的二叉树进行前序遍历，然后对每个节点交换左右子节点。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode tempNode = root.left;</span><br><span class="line">    root.left = root.right;</span><br><span class="line">    root.right = tempNode;</span><br><span class="line">    </span><br><span class="line">    Mirror(root.left);</span><br><span class="line">    Mirror(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的子结构</title>
      <link href="/2019/09/11/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"/>
      <url>/2019/09/11/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两棵二叉树A和B，判断B是不是A的子结构。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>先对A树进行遍历，找到与B树根节点值相等的节点R。</li><li>判断A树中以R为根节点的子树是否包含B树一样的结构。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasSubtree</span><span class="params">(TreeNode root1, TreeNode root2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root1 == <span class="keyword">null</span> || root2 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> isSubtreeWithRoot(root1, root2) || hasSubtree(root1.left, root2)</span><br><span class="line">        || hasSubtree(root1.right, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtreeWithRoot</span><span class="params">(TreeNode root1, TreeNode root2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root2 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(root1 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(root1.val != root2.val)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> isSubtreeWithRoot(root1.left, root2.left) </span><br><span class="line">        &amp;&amp; isSubtreeWithRoot(root1.right, root2.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并两个排序链表</title>
      <link href="/2019/09/10/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/09/10/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然是按照递增排序的。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>递归：合并过程中，每次都是从两个链表中找出较小的一个来连接，因此可以采用递归来实现；当任一链表为null时，直接连接另一个链表即可；其余情况只需在两个链表中找出较小的一个节点进行连接，该节点的next值继续通过递归函数来连接。</li><li>非递归：分情况讨论即可，注意代码中头节点的赋值过程。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val=val;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode l1, ListNode l2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    <span class="keyword">if</span>(l2 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    <span class="keyword">if</span>(l1.val &lt;= l2.val)&#123;</span><br><span class="line">        l1.next = merge(l1.next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        l2.next = merge(l1, l2.next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode l1, LisstNode l2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    <span class="keyword">if</span>(l2 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    </span><br><span class="line">    ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode p = dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1.val &lt; l2.val)&#123;</span><br><span class="line">            p.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        p.next = l2;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p.next = l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2019/09/10/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/09/10/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>输入的链表头指针是null。</li><li>输入的链表只有一个节点。</li><li>输入的链表有多个节点。</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>方法一：三指针实现，设置pre，p，next指针。令p指向pre，next则是防止链表断裂。</li><li>方法二：递归实现，找到最后一个节点作为返回值，递归函数中，找到最后的头节点后，开始进行每个节点next值的转换。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="三指针"><a href="#三指针" class="headerlink" title="三指针"></a>三指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line">    ListNode(<span class="keyword">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode p = head;</span><br><span class="line">    ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">    ListNdoe next = p.next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        p.next = pre;</span><br><span class="line">        pre = next;</span><br><span class="line">        next = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = pre;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseNode</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//head.next == null,即可跳出一层递归</span></span><br><span class="line">    ListNode newHead  = reverseNode(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（假设链表为<code>1-&gt;2-&gt;3</code>）<code>head.next.next = head</code>，理解为<code>head.next -&gt; head</code>，此时链表两个节点已反转；<code>head.next = null</code>，表示<code>head -&gt; head.next</code>指针已断。注意，递归是从链表末尾开始反转的。</p><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseNode</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">    ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">   ListNode next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        next = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">节点一</th><th>节点二</th></tr></thead><tbody><tr><td align="center">pre</td><td>next</td></tr><tr><td align="center">cur</td><td>cur.next</td></tr></tbody></table><p>（假设链表为<code>1-&gt;2-&gt;3</code>）节点交换顺序：<code>next &lt;-- cur.next &lt;-- pre &lt;-- cur</code>，交换结束后，此时pre和next存储的是节点一、二；而此时<code>cur.next = null</code>，说明<code>1 -&gt; null</code>，然后cur已从节点一转换到节点二。以此类推，在节点二和节点三交换时，<code>cur.next = pre</code>，此时pre存储的是节点一，则有<code>2-&gt;1</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中环的入口节点</title>
      <link href="/2019/09/07/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E8%8A%82%E7%82%B9/"/>
      <url>/2019/09/07/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个链表中包含环，找出环的入口结点。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>方法一：<ul><li>设置快慢指针，当两个指针相遇，记录相遇点。</li><li>快慢指针再次从相遇点出发，记录到第二次相遇之间使用的步数m。</li><li>设置两个同步指针，一个位于头节点，一个位于距头节点为m的节点，两指针相遇点即为入口点。</li></ul></li><li>方法二：<ul><li>设置<em>快指针</em>每次移动2步，<em>慢指针</em>每次移动1步。</li><li>因为存在环，两个指针必定在环内相遇。</li><li>假设相遇点在(x+y)节点，<em>快指针</em>移动的节点数为<code>x+2y+z</code>；<em>慢指针</em>移动的节点数为<code>x+y</code>，由于<em>快指针</em>的速度是<em>慢指针</em>速度的两倍，所以<code>2(x+y) = x+2y+z</code>，<code>x = z</code>。</li><li>这说明，<strong>头节点移动到入口节点的距离</strong>等于<strong>相遇点移动到入口节点的距离</strong></li></ul></li></ul><h2 id="快慢指针结论"><a href="#快慢指针结论" class="headerlink" title="快慢指针结论"></a>快慢指针结论</h2><ul><li><strong>无论快慢指针差几步，两者在有环单链表中必定相遇</strong></li><li><strong>快慢指针必定在环内相遇</strong></li><li><strong>快慢指针第一次相遇到第二次相遇所用的步数m为环内节点数</strong></li><li><strong>P1指针位于头节点，P2指针先在链表上移动N步，N为环内节点数，P1和P2以相同速度移动，两者相遇节点为环入口点</strong></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line">    ListNode(<span class="keyword">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">meetingNode</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode f = head;</span><br><span class="line">    ListNode s = head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(f != <span class="keyword">null</span>)&#123;</span><br><span class="line">        s = s.next;</span><br><span class="line">        f = f.next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s != <span class="keyword">null</span> &amp;&amp; s == fast)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">entryNodeOfLoop</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">    ListNode meetingNode = meetingNode(head);</span><br><span class="line">    <span class="keyword">if</span>(meetingNdoe == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算环内节点数</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    ListNode p1 = meetingNode.next;</span><br><span class="line">    <span class="keyword">while</span>(p1 != meetingNode)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//先移动p1，次数为count</span></span><br><span class="line">    p1 = head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i++)&#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode p2 = head;</span><br><span class="line">    <span class="keyword">while</span>(p1 != p2)&#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">entryNodeOfCycle</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode entry = head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">            <span class="keyword">while</span>(entry != slow)&#123;</span><br><span class="line">                entry = entry.next;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> entry;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调整数组顺序使奇数位于偶数前面</title>
      <link href="/2019/09/07/%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/"/>
      <url>/2019/09/07/%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>设置两个指针分别指向数组头尾，前一个指针往后走，后一个指针往前走。在两个指针相遇前，前一个指针总是位于后一个指针的前面。如果当前一个指针指向偶数，并且后一个指针指向奇数，交换两个数字。</li><li>遍历数组，奇数前插入，偶数后插入。该方法保证稳定性。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="双指针（不稳定）"><a href="#双指针（不稳定）" class="headerlink" title="双指针（不稳定）"></a>双指针（不稳定）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reorder</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length = array.length;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="comment">//向后移动low指针</span></span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; (arr[low] &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向前移动high指针</span></span><br><span class="line">        <span class="keyword">while</span>(high &gt;= <span class="number">0</span> &amp;&amp; (arr[high] &amp; <span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[low];</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            arr[high] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reorder</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">//计算奇数数量</span></span><br><span class="line">    <span class="keyword">int</span> oddCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> val : arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>((val &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">            oddCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] copy = arr.clone();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = oddCount;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> arr : copy)&#123;</span><br><span class="line">        <span class="keyword">if</span>((num &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">            arr[i++] = num;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr[j++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表示数值的字符串</title>
      <link href="/2019/09/06/%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/09/06/%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串“+100”、“5e2”、“-123”、“3.1416”及“-1E-16”都表示数值，但“12e”、“1a3.14”、“1.2.3”、“+-5”及“12e+5.4”都不是。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>方法一：表示数值的字符串遵循模式为A[.[B]][e|EC]或者.B[e|EC]，其中A为数值的整数部分，B紧跟着小数点为数值的小数部分，C紧跟着’e’或者’E’为数值的指数部分。A和C都是带符号整数，B是不带符号整数。</li><li>方法二：使用正则表达式匹配</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNum</span><span class="params">(<span class="keyword">char</span>[] str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];<span class="comment">//记录当前字符位置</span></span><br><span class="line">    <span class="comment">//判断A</span></span><br><span class="line">    <span class="keyword">boolean</span> isNum;</span><br><span class="line">    isNum = isInteger(str, index);</span><br><span class="line">    <span class="comment">//判断B</span></span><br><span class="line">    <span class="keyword">if</span>(index[<span class="number">0</span>] &lt; str.length &amp;&amp; (str[index[<span class="number">0</span>]] == <span class="string">'.'</span>))&#123;</span><br><span class="line">        index[<span class="number">0</span>]++;</span><br><span class="line">        isNum = isUnsignedInteger(str, index) || isNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断C</span></span><br><span class="line">    <span class="keyword">if</span>(index[<span class="number">0</span>] &lt; str.length &amp;&amp; (str[index[<span class="number">0</span>]] == <span class="string">'e'</span> || str[index[<span class="number">0</span>]] == <span class="string">'E'</span>))&#123;</span><br><span class="line">        index[<span class="number">0</span>]++;</span><br><span class="line">        isNum = isInteger(str, index) &amp;&amp; isNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isNum &amp;&amp; index[<span class="number">0</span>] == str.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInteger</span><span class="params">(<span class="keyword">char</span>[] str, <span class="keyword">int</span>[] index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index[<span class="number">0</span>] &lt; str.length &amp;&amp; (str[index[<span class="number">0</span>]] == <span class="string">'+'</span> || str[index[<span class="number">0</span>]] == <span class="string">'-'</span>))&#123;</span><br><span class="line">        index[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isUnsignedInteger(str, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isUnsignedInteger</span><span class="params">(<span class="keyword">char</span>[] str, <span class="keyword">int</span>[] index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = index[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span>(index[<span class="number">0</span>] &lt; str.length &amp;&amp; (str[index[<span class="number">0</span>]] - <span class="string">'0'</span> &lt;= <span class="number">9</span> &amp;&amp; str[index[<span class="number">0</span>]] - <span class="string">'0'</span> &gt;= <span class="number">0</span>))&#123;</span><br><span class="line">        index[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index[<span class="number">0</span>] &gt; start)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNum</span><span class="params">(<span class="keyword">char</span>[] str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(str).matches(<span class="string">"[+-]?\d*(\.\d+)?([eE][+-]?\d+)?"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式匹配</title>
      <link href="/2019/09/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>/2019/09/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数用来匹配包含’.’和’*‘的正则表达式。模式中的字符’.’表示任意一个字符，而’*‘表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab*ac*a”匹配，但与”aa.a”及”ab*a”均不匹配。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>如果模式中的字符ch是’.’，那么它可以匹配字符串中任何字符。</li><li>如果模式中的字符ch不是’.’，而且字符串中的字符也是ch，那么它们互相匹配。</li><li>当字符串中的字符和模式中的字符相匹配时，接着匹配后面的字符。</li><li>当模式中的第二个字符不是’*’时：<ul><li>如果字符串中第一个字符和模式中的第一个字符相匹配，那么在字符串和模式上都向后移动一个字符，然后匹配剩余的字符串和模式。</li><li>如果字符串中第一个字符和模式中的第一个字符不相匹配，则直接返回false。</li></ul></li><li>当模式中的第二个字符是’*’时：<ul><li>若当前字符不相等，则模式后移两个字符，继续比较</li><li>若当前字符不相等：<ul><li>字符串字符位置不变，模式后移两位(如a*被忽略)</li><li>字符串后移一位，模式后移两位</li><li>字符串后移一位，模式字符不变</li></ul></li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span>[] str, <span class="keyword">char</span>[] pattern)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="keyword">null</span> || pattern == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matchCore(str, <span class="number">0</span>, pattern, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">matchCore</span><span class="params">(<span class="keyword">char</span>[] str, <span class="keyword">int</span> indexOfStr, <span class="keyword">char</span>[] pattern, <span class="keyword">int</span> indexOfPattern)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(indexOfStr == str.length &amp;&amp; indexOfPattern == pattern.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(indexOfStr == str.length &amp;&amp; indexOfPattern == pattern.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((indexOfPattern + <span class="number">1</span> &lt; pattern.length &amp;&amp; pattern[indexOfPattern + <span class="number">1</span>] == <span class="string">'*'</span>) </span><br><span class="line">       || (indexOfStr &lt; str.length &amp;&amp; pattern[indexOfPattern] == str[indexOfStr]))&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> matchCore(str, indexOfStr, pattern, indexOfPattern + <span class="number">2</span>)</span><br><span class="line">            || matchCore(str, indexOfStr + <span class="number">1</span>, pattern, indexOfPattern)</span><br><span class="line">            || matchCore(str, indexOfStr + <span class="number">1</span>, pattern, indexOfPattern + <span class="number">2</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> matchCore(str, indexOfStr, pattern, indexOfPattern + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除链表中重复的节点</title>
      <link href="/2019/09/05/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>/2019/09/05/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个排序链表，删除重复节点。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>设置preNode为当前节点的前一个节点，循环遍历整个链表，若当前节点的值与下一个节点的值相等，则继续往后比较，直到下一个节点k的值不等或为null为止。</li><li>若相等，则将当前节点的指针指向节点k，即相当于删除操作。</li><li>若不相等，则让preNode和当前节点指针均向后移一位。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next)&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode preNode = <span class="keyword">new</span> ListNode();</span><br><span class="line">    ListNode tempNode = preNode;</span><br><span class="line">    preNode.next = head;</span><br><span class="line">    ListNode curNode = head;<span class="comment">//当前节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(curNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//判断当前节点的值是否与下一个节点相同</span></span><br><span class="line">        <span class="keyword">if</span>(curNode.next != <span class="keyword">null</span> &amp;&amp; curNode.val == curNode.next.val)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curNode.next != <span class="keyword">null</span> &amp;&amp; curNode.val == curNode.next.val)&#123;</span><br><span class="line">                <span class="comment">//此时当前节点已经移动到下一个节点，但前一个节点没变</span></span><br><span class="line">                curNode = curNode.next;</span><br><span class="line">            &#125;</span><br><span class="line">            preNdoe.next = curNode.next;<span class="comment">//删除重复节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            preNode = curNode;<span class="comment">//preNode指针后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        curNode = curNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempNode.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在O(1)时间内删除链表的节点</title>
      <link href="/2019/09/05/%E5%9C%A8O(1)%E6%97%B6%E9%97%B4%E5%86%85%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>/2019/09/05/%E5%9C%A8O(1)%E6%97%B6%E9%97%B4%E5%86%85%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定单向链表的头指针和一个结点指针，定义一个函数在O(1)时间删除该结点。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>设待删除的节点为i，则它的下一个节点为j，将j节点的内容复制到i节点，再把i节点的指针指向j节点的下一个节点，最后删除j节点，即相当于删除i节点。</li><li>当节点i为尾节点时，则需要从头到尾顺序遍历链表，得到i节点的前序节点h，将h节点的指针指向节点j，删除i节点即可。</li><li>若链表中只有一个节点，在删除节点之后还需要将头节点置为null。</li><li>题目中要求在<em>O(1)</em>时间内删除节点，隐藏的条件是待删除的节点在链表中。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> val, ListNode next)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteNode</span><span class="params">(ListNode head, ListNode p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || p == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//待删除节点不是尾节点</span></span><br><span class="line">        <span class="keyword">if</span>(p.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode nextNode = p.next;</span><br><span class="line">            p.val = nextNode.val;<span class="comment">//复制</span></span><br><span class="line">            p.next = nextNode.next;</span><br><span class="line">            nextNode = <span class="keyword">null</span>;<span class="comment">//删除</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(head == p)&#123; <span class="comment">//链表只有一个节点</span></span><br><span class="line">            p = <span class="keyword">null</span>;</span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">//待删除节点是尾节点</span></span><br><span class="line">            ListNode preNode = head;</span><br><span class="line">            <span class="keyword">while</span>(preNode.next != p &amp;&amp; preNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">                preNode = preNdoe.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(preNode == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">            preNode.next = <span class="keyword">null</span>;</span><br><span class="line">            p = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GC收集器</title>
      <link href="/2019/09/04/GC%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>/2019/09/04/GC%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://bruce0hh.github.io/2019/09/01/GC%E5%92%8C%E5%AF%B9%E8%B1%A1/" target="_blank" rel="noopener"><em>《GC与对象》</em></a>中，我们了解了垃圾回收的过程，以及对象的”生死存亡”，并且了解了虚拟机的垃圾收集算法。<em>《深入理解JVM》</em>第3章，我们将继续了解HotSpot虚拟机如何实现这些垃圾收集算法。接下来，对于内存回收的动作，我们会接触到HotSpot虚拟机中的各种GC收集器，认识每种GC收集器的特点性能。</p><a id="more"></a><h1 id="HotSpot-的算法实现"><a href="#HotSpot-的算法实现" class="headerlink" title="HotSpot 的算法实现"></a>HotSpot 的算法实现</h1><h2 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h2><ul><li>在可达性分析中，<code>GC Roots</code>节点找引用链这个操作，由于方法区较大，若要逐个检查这里面的引用，那么必然消耗很多时间。</li><li>可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行——“一致性”的意思是指在整个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以分析过程中对象引用关系还在不断变化的情况，该点不满足的话，分析结果准确性就无法得到保证。</li><li>上述理由是导致<strong>GC进行时必须停顿所有Java执行线程</strong>。</li><li>目前主流Java虚拟机使用的都是准确式GC，所以当执行系统停顿下来之后，并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机可以直接得知哪些地方存放着对象引用。</li><li>HotSpot虚拟机的实现中，是使用一组OopMap数据结构来达到这个目的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用。这样，GC在扫描就可以得知信息。</li></ul><h2 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h2><ul><li>OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会非常高。</li><li>HotSpot也只是在”特定位置”记录了这些信息，这些位置称为”安全点”，即程序执行时并非在所有地方都停顿下来开始GC，只有到达安全点才能暂停。</li><li>安全点选定基本上是以”是否具有让程序产时间执行的特征”为标准——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，”长时间执行”的最明显特征就是指令序列复用。</li><li>对于安全点，另一个需要考虑的问题是如何在GC发生时让所有线程(不包括执行JNI调用的线程)都跑到最近的安全点上再停顿下来。</li><li>抢先式中断不需要线程执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它跑到安全点上。现在几乎没有虚拟机使用抢先式中断。</li><li>而主动式中断是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</li></ul><h2 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h2><ul><li>安全点机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的安全点，但是当程序线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，跑到安全的地方去中断挂起，JVM也不可能等待线程重新被分配CPU时间。</li><li>对于上述问题，就需要安全区域来解决。安全区域就是指在一段代码片段之中，引用关系不会发生变化。在这个区域中的任意地方开始GC都是安全的。我们也可以把安全区域看成是被扩展的安全点。</li><li>在线程执行到安全区域中的代码时，首先标识自己已经进入了安全区域，那样，在这段时间里JVM要发起GC时，就不用管标识自己为安全区域状态的线程。</li><li>在线程要离开安全区域时，它要检查系统是否完成了根节点枚举(或是整个GC过程)，如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开安全区域信号为止。</li></ul><h1 id="GC-收集器"><a href="#GC-收集器" class="headerlink" title="GC 收集器"></a>GC 收集器</h1><h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><ul><li>并行：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</li><li>并发：指用户线程与垃圾收集线程同时执行(但不一定时并行的，可能会交替执行)，用户程序在继续执行，而垃圾收集程序运行于另外一个CPU上。</li></ul><h2 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h2><ul><li>Serial收集器是一个<strong>单线程</strong>收集器，采用<strong>“复制”算法</strong>，它在进行垃圾收集时，必须暂停其他所有的工作线程直到它收集结束。</li><li>到现在为止，它依然是虚拟机运行在Client模式下的默认<em>新生代收集器</em>。</li><li>简单而高效，对于限定的单个CPU环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</li></ul><h2 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h2><ul><li>ParNew收集器其实就是Serial收集器的<strong>多线程</strong>版，采用<strong>“复制”算法</strong>。</li><li>除了Serial收集器外，目前只有它能与CMS收集器配合工作。</li><li>ParNew收集器的效率不如Serial收集器。但是，随着可以使用的CPU数量的增加，它对于GC时系统资源的有效利用还是很有好处的。</li><li>它默认开启的收集线程数与CPU的数量相同，在CPU非常多的环境下，可以使用<code>-XX:ParallelGCThreads</code>参数来限制垃圾收集的线程数。</li></ul><h2 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h2><ul><li>Parallel Scavenge收集器是一个并行的<strong>多线程</strong>收集器，采用<strong>“复制”算法</strong>。</li><li>CMS等收集器目的是尽可能地缩短垃圾收集时用户线程的停顿时间，Parallel Scavenge收集器的目标是达到一个可控制的吞吐量。</li><li>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，<code>吞吐量 = 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)</code>。</li><li>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快地完成程序的运算任务，主要适合在后台运算而不需要太多的交互任务。</li><li>由于与吞吐量关系密切，Parallel Scavenge收集器也经常被称为”吞吐量优先”收集器。</li></ul><h2 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h2><ul><li>Serial Old收集器是Serial收集器的<em>老年代</em>版本，它同样是一个<strong>单线程</strong>收集器，使用<strong>“标记-整理”算法</strong>。</li><li>它有两大用途：一是和Parallel Scavenge收集器搭配使用；另一个是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。</li></ul><h2 id="Parallel-收集器"><a href="#Parallel-收集器" class="headerlink" title="Parallel 收集器"></a>Parallel 收集器</h2><ul><li>Parallel Old是Parallel Scavenge收集器的<em>老年代</em>版本，使用<strong>多线程</strong>和<strong>“标记-整理”算法</strong>。</li><li>在注重吞吐量以及CPU资源敏感的场合，窦娥可以优先考虑Parallel Scavenge + Parallel Old收集器组合。</li></ul><h2 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h2><ul><li>CMS是<em>老年代</em>收集器，使用<strong>多线程</strong>和<strong>“标记-清除”算法</strong>。</li><li>CMS收集器是一种以获取最短回收停顿时间为目标的收集器。</li><li>CMS回收分为4个步骤：<strong>初始标记</strong>、<strong>并发标记</strong>、<strong>重新标记</strong>、<strong>并发清除</strong>。</li><li>初始标记和重新标记两个步骤仍然需要停顿所有Java执行线程。初始标记仅仅只是标记一下<code>GC Roots</code>能直接关联到的对象，速度很快。</li><li>并发标记就是进行<code>GC Roots Tracing</code>的过程，重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记时间稍长，但远比并发标记时间短。</li><li>由于其中耗时最长的并发标记和并发清除过程都可以与用户线程一起工作，总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</li><li>CMS缺点：<ul><li>CMS对CPU资源十分敏感。在并发阶段，它会因为占用了一部分线程而导致应用程序变慢，总吞吐量降低。</li><li>CMS无法处理浮动垃圾，可能出现<code>Concurrent Mode Failure</code>失败而导致另一次<code>Full GC</code>的产生。</li><li>由于采用了<strong>“标记-清除”算法</strong>，在收集结束时，会有大量空间碎片产生。往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间分配当前对象，不得不提前触发一次<code>Full GC</code>。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GC和对象</title>
      <link href="/2019/09/01/GC%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/09/01/GC%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><em>《深入理解JVM》</em>第3章，了解GC的过程以及对象的”生死存亡”。</p><p>GC需要完成的3件事：</p><ul><li><a href="#which">哪些内存需要回收？</a></li><li><a href="#when">什么时候回收？</a></li><li><a href="#how">如何回收？</a></li></ul><a id="more"></a><h1 id="内存分配与回收"><a href="#内存分配与回收" class="headerlink" title="内存分配与回收"></a><span id="which">内存分配与回收</span></h1><ul><li>程序计数器、虚拟机栈、本地方法栈3个区域随线程而生，随线程而灭。这几个区域内就不需要过多的考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。</li><li>Java堆与方法区则不一样，一个接口的多个实现类需要的内存可能不一样，一个方法的多个分支需要的内存也可能不一样，只有在程序处于运行期间才知道会创建哪些对象，这部分内存的分配和回收都是动态的。</li></ul><h1 id="对象存活"><a href="#对象存活" class="headerlink" title="对象存活"></a><span id="when">对象存活</span></h1><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><ul><li>引用计数算法：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；在任何时候计数器为0的对象就是不可能再被使用的。</li><li>引用计数器算法的实现简单，判定效率也很高。但是它很难解决对象之间相互循环引用的问题。</li><li>虚拟机并不通过计数算法判断对象是否存活。</li></ul><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><ul><li>可达性分析算法：通过称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到<code>GC Roots</code>没有任何引用链相连时(<code>GC Roots</code>到这个对象不可达)，则证明此对象是不可用的。</li><li>Java语言中可作为<code>GC Roots</code>对象包括以下几种：<ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象。</li><li>方法区中类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI(即Native方法)引用的对象。</li></ul></li><li>Java的主流实现中，都是称通过可达性分析来判定对象是否存活的。</li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li>Java将引用分为强引用、软引用、弱引用、虚引用4种(强度依次减弱)。</li><li>强引用就是在程序代码之中普遍存在，类似<code>Object obj = new Object()</code>这类引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</li><li>软引用是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够内存，才会抛出内存溢出异常。JDK提供了<code>SoftReference</code>类来实现软引用。</li><li>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。JDK提供了<code>WeakReference</code>类来实现弱引用。</li><li>虚引用是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。JDK提供了<code>PhantomReference</code>类来实现虚引用。</li></ul><h1 id="对象死亡"><a href="#对象死亡" class="headerlink" title="对象死亡"></a>对象死亡</h1><ul><li>即使在可达性分析算法中不可达的对象，也并非是真的被回收了。</li><li>要真正宣告一个对象死亡，至少要经历两次标记过程。</li><li>如果对象在进行可达性分析后发现没有<code>GC Roots</code>相连接的引用链，那么他将会<strong>第一次</strong>标记并且进行一次筛选。筛选的条件是此对象是否有必要执行<code>finalize()</code>方法。</li><li>当对象没有覆盖<code>finalize()</code>方法，或者<code>finalize()</code>方法以及被虚拟机调用过，虚拟机将这两种情况都视为”没有必要执行”。</li><li>如果对象被判定有必要执行<code>finalize()</code>方法，则这个对象将会放置在一个<code>F-Queue</code>队列之中，并在稍后由一个虚拟机自动建立的、低优先级的<code>Finalizer</code>线程去执行(指虚拟机会触发这个方法，并不承诺等待它运行结束，这是为了防止一个对象在队列中执行缓慢而导致整个内存回收系统崩溃)。</li><li>然后GC将对<code>F-Queue</code>中的对象进行<strong>第二次</strong>小规模的标记，如果对象要在<code>finalize()</code>中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可(譬如把自己(this关键字)复制给某个类变量或者对象的成员变量)。</li><li>任何一个对象的<code>finalize()</code>都会被系统自动调用一次，所以这种自救机会只有一次。</li></ul><h1 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h1><ul><li>方法区的垃圾收集主要回收两部分的内容：废弃常量和无用的类。</li><li>以常量池字面量的回收为例，假如一个字符”abc”已经加入了常量池，但是当前系统没有一个String对象是叫”abc”的，这就是说没有任何String对象引用常量池中的”abc”常量，也没有其他地方引用了这个字面量。若此时发生内存回收，且必要的话，该”abc”常量就会被系统清理出常量池。</li><li>类需要同时满足下面3个条件才能算是”无用的类”：<ul><li>该类所有的实例都已经被回收，即Java堆中不存在该类的任何实例。</li><li>加载该类的<code>ClassLoader</code>已经被回收。</li><li>该类对应的<code>java.lang.Class</code>对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul></li><li>HotSpot虚拟机是否对类进行回收，提供了<code>-Xnoclassgc</code>参数进行控制。可以使用<code>-verbose:class</code>以及<code>-XX:+TraceClassLoading</code>、<code>-XX:+TraceClassUnLoading</code>查看类加载和卸载信息。</li></ul><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a><span id="how">垃圾收集算法</span></h1><h2 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h2><ul><li>最基础的收集算法是”标记-清除”算法。算法分为”标记”和”清除”两个部分。</li><li>首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</li><li>主要不足有两个：<ul><li>效率问题，标记和清除两个过程的效率都不高。</li><li>空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集的动作。</li></ul></li></ul><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><ul><li>“复制”算法，将可用的容量划分为大小相等的两块，每次只用一块，当这一块内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</li><li>这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</li><li>现在的商业虚拟机都采用这种收集算法来回收新生代。</li></ul><h2 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h2><ul><li>根据老年代的特点，有人提出了一种”标记-整理”算法。</li><li>标记过程与”标记-清除”算法一样，在标记完成后，让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</li></ul><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><ul><li>当前商业虚拟机的垃圾收集都采用”分代收集”。</li><li>把Java堆划分为新生代和老年代。</li><li>在新生代中，每次垃圾收集时发现大批对象死去，只有少量存活，那就选用复制算法，只需付出少量存活对象的复制成本就可以完成收集。</li><li>老年代中因为对象存活率高，没有额外空间对它进行分配担保，必须使用”标记-清除”或”标记-整理”算法进行回收。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印从1到最大的n位数</title>
      <link href="/2019/09/01/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/"/>
      <url>/2019/09/01/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入数字n，按顺序打印出从1最大的n位十进制数。比如输入3，则打印出1、2、3一直到最大的3位数999。</p><a id="more"></a><h2 id="用例测试"><a href="#用例测试" class="headerlink" title="用例测试"></a>用例测试</h2><ul><li>功能测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>如果我们在数字前面补零，就会发现n位所有十进制数其实就是n个从0到9的全排列。也就是说，我们把数字的每一位都从0到9排列一遍，就得到了所有十进制数。打印的时候，排在前面的0不打印出来而已。</li><li>递归方法：采用递归方式将每一位都从0到9排列出来，把字符串表达的数字打印出来。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Print1ToMax</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print1ToMaxDigits</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">char</span>[] number = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; number.length; k++)&#123;</span><br><span class="line">            number[k] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">            makeNumber(n, number, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeNumber</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span>[] number, <span class="keyword">int</span> nNumber, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == number.length - <span class="number">1</span>)&#123;</span><br><span class="line">            number[index] = (<span class="keyword">char</span>)(nNumber + <span class="string">'0'</span>);</span><br><span class="line">            PrintNumber(number);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            number[index] = (<span class="keyword">char</span>)(nNumber + <span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">                makeNumber(n, number, i, index + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印数字</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">char</span>[] number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = number.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(number[m] == <span class="string">'0'</span>)&#123;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            System.out.println(number[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 大数问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值的整数次方</title>
      <link href="/2019/09/01/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
      <url>/2019/09/01/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>底数和指数分别设置为正数、负数和零。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们可以用以下公式求解：<br>$$<br>a^n =\begin{cases}<br>a^{n/2} \cdot a^{n/2}\quad\quad\quad\quad n是偶数<br>\\<br>a^{(n-1)/2} \cdot a^{(n-1)/2} \quad n是奇数<br>\end{cases}<br>$$<br>这个公式就能通过递归来实现。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Power</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> IsInvalid = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> exponent)</span></span>&#123;</span><br><span class="line">        IsInvalid = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//指数大于0</span></span><br><span class="line">        <span class="keyword">if</span>(exponent &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            result = powerCore(base,expoent);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)&#123;<span class="comment">//指数小于0</span></span><br><span class="line">            <span class="comment">//底数等于0,0的负次方不存在</span></span><br><span class="line">            <span class="keyword">if</span>(base == <span class="number">0</span>)&#123;</span><br><span class="line">                IsInvalid = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">            &#125;</span><br><span class="line">            result = <span class="number">1</span> / powerCore(base, -exponent);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//0的次方输出为1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">powerCore</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span></span>&#123;</span><br><span class="line">        <span class="comment">//指数为1</span></span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> base;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//指数为0</span></span><br><span class="line">        <span class="keyword">if</span>(exponent = <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> result = powerCore(base,exponent &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        result *= result;</span><br><span class="line">        <span class="keyword">if</span>((exponent &amp; <span class="number">0x1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            result *= base;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用右移运算符代替了除以2，用位与运算符代替了求余运算符来判断一个数是奇数还是偶数。位运算的效率要比乘除及求余效率要高很多。以为该算法通过递归求解，且每次递归exponent都减小一半，因此整个算法的时间复杂度为<em>O(logN)</em>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制位运算</title>
      <link href="/2019/08/31/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2019/08/31/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p><strong>总结二进制位运算的用法</strong></p><a id="more"></a><p><code>a = 1010 1010</code></p><h1 id="按位与-amp"><a href="#按位与-amp" class="headerlink" title="按位与&amp;"></a>按位与&amp;</h1><ul><li>清零：a&amp;0=0</li><li>取指定位上的数字，如取得数字a的最后四位：a&amp;0000 1111 = 0000 1010</li></ul><h1 id="按位或"><a href="#按位或" class="headerlink" title="按位或|"></a>按位或|</h1><ul><li>对某些位置置为1，如将a的后四位置为1：a|0000 1111 = 1010 1111</li></ul><h1 id="异或"><a href="#异或" class="headerlink" title="异或^"></a>异或^</h1><ul><li>将某些位置取反，如将a的后四位取反：a^0000 1111 = 1010 0101</li><li>与0异或保留原值，如：a^0000 0000 =1010 1010</li><li>交换两个的变量值：A=A^B; B=A^B; A=A^B; 可以完成A和B的交换。</li></ul><h1 id="口诀"><a href="#口诀" class="headerlink" title="口诀"></a>口诀</h1><p>清零取数要用与，某位置一可用或</p><p>若要取反和交换，轻轻松松用异或</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制中1的个数</title>
      <link href="/2019/08/31/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2019/08/31/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。例如把9表示成二进制是1001，有2位是1。因此如果输入9，该函数输出2。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>正数</li><li>负数</li><li>0</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><a href="https://bruce0hh.github.io/2019/08/31/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E8%BF%90%E7%AE%97/" target="_blank" rel="noopener">二进制位运算</a></li><li>方法一：”与运算”有一个性质：通过与对应位上为1，其余位为0的数进行与运算，可以某一整数指定位上的值。这道题中，先把整数n与1做与运算，判断最低位是否为1；接着把1左移一位，与n做与运算，可以判断次低位是否为1……反复左移，即可对每一个位置都进行判断，从而可以获得1的个数。这种方法需要循环判断32次。</li><li>方法二：如果一个整数不为0，把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1。其余所有位将不会受到影响。再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。因此，把一个整数减1，再和原来的整数做与运算，会把该整数最右边的1变成0。这种方法，整数中有几个1，就只需要循环判断几次。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((flag &amp; n) != <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = flag &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1_2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        n = (n - <span class="number">1</span>) &amp; n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剪绳子</title>
      <link href="/2019/08/31/%E5%89%AA%E7%BB%B3%E5%AD%90/"/>
      <url>/2019/08/31/%E5%89%AA%E7%BB%B3%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一根长度为n绳子，请把绳子剪成m段（m、n都是整数，n&gt;1并且m≥1）。每段的绳子的长度记为k[0]、k[1]、……、k[m]。k[0]*k[1]*…*k[m]可能的最大乘积是多少？例如当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到最大的乘积18。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>边界值测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>动态规划：我们把长度为n的绳子剪成若干段，得到各段长度乘积的最大值定义为<code>f(n)</code>，我们在剪第一刀的时候就有<code>n-1</code>种选择，也就是剪出来的绳子第一段可能为<code>1，2，...，n-1</code>，因此，<code>f(n)=max(f(i)*f(i-1))</code>。</li><li>贪心算法：当<code>n&gt;=5</code>时，我们尽可能地多剪长度为3的绳子；当剩下的绳子长度为4时，把绳子剪成两段长度为2的绳子。此时，绳子的各长度乘积为最大。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxCutting</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//p存放子问题的最优解</span></span><br><span class="line">    <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    p[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    p[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    p[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= len; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; p[j] * p[i - j])</span><br><span class="line">                max = p[j] * p[i - j];</span><br><span class="line">        &#125;</span><br><span class="line">        p[i] = max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[len];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxCutting2</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (length &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> timesOf3 = length / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> timesOf2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (length - timesOf3 * <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        timesOf3--;</span><br><span class="line">        <span class="comment">// timesOf2=2;  //错误！</span></span><br><span class="line">    &#125;</span><br><span class="line">    timesOf2 = (length - timesOf3 * <span class="number">3</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (Math.pow(<span class="number">3</span>, timesOf3) * Math.pow(<span class="number">2</span>, timesOf2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存区域与内存溢出异常</title>
      <link href="/2019/08/30/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/"/>
      <url>/2019/08/30/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p><em>《深入理解JVM》</em>第2章，介绍Java虚拟机内存的各个区域，讲解这些区域的作用、服务对象以及其中产生的问题。了解虚拟机内存概况后，探讨虚拟机在Java堆中对象分配、布局和访问的全过程。</p><a id="more"></a><h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><p>Java虚拟机所管理的内存将会包括以下几个运行时数据区域：<a href="#PCR">程序计数器</a>、<a href="#JVMS">Java虚拟机栈</a>、<a href="#NMS">本地方法栈</a>、<a href="#Heap">Java堆</a>、<a href="#MA">方法区</a>。其中，方法区和堆为所有线程共享的数据区；其余的为线程隔离的数据区。</p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a><span id="PCR">程序计数器</span></h2><ul><li>程序计数器是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。</li><li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</li><li>分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器完成。</li></ul><h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a><span id="JVMS">Java虚拟机栈</span></h2><ul><li>与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。</li><li>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</li><li>局部变量表存放了编译期可知的各种基本数据类型、对象引用(reference类型，而非对象本身)和returnAddress类型(指向了一条字节码指令的地址)。</li><li>其中64位长度的<code>long</code>和<code>double</code>类型的数据会占用2个局部变量空间(Slot)，其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</li><li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError</code>异常；如果虚拟机可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出<code>OutOfMemoryError</code>异常。</li></ul><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a><span id="NMS">本地方法栈</span></h2><ul><li>虚拟机栈为虚拟机执行Java方法(字节码)服务，而本地方法栈则为虚拟机使用的到的Native方法服务。</li><li>与虚拟机栈一样，本地方法栈区域也会抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常。</li></ul><h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a><span id="Heap">Java堆</span></h2><ul><li>对于大多数应用来说，Java堆是Java虚拟机所管理内存中最大的一块。</li><li>Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。(所有对象的实例以及数组都在这里分配内存)</li><li>Java堆中可以细分为：新生代和老年代。</li><li>无论如何划分，都与存放内容无关，无论哪个区域，存储的都是对象实例。</li><li>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。</li><li>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出<code>OutOfMemoryError</code>异常。</li></ul><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a><span id="MA">方法区</span></h2><ul><li>方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码数据。</li><li>Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。</li><li>方法区的内存回收目标主要是针对常量池的回收和对类型的卸载。</li><li>当方法区无法满足内存分配需求时，将抛出<code>OutOfMemoryError</code>异常。</li></ul><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><ul><li>运行时常量池是方法区的一部分。用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</li><li>除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。</li><li>运行时常量池相对于Class文件常量池另外一个重要特征是动态性，Java并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中。(String类的intern()方法)</li><li>当常量池无法申请到内存时会抛出<code>OutOfMemoryError</code>异常。</li></ul><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><ul><li>直接内存并非虚拟机运行时数据区的一部分，也非Java虚拟机规范中定义的内存区域。</li><li>在JDK1.4中新加入了NIO类，引入了一种基于通道与缓冲区的I/O方式，它可以使用<code>Native</code>函数库直接分配堆外内存，然后通过一个存储在Java堆中的<code>DirectByteBuffer</code>对象作为这块内存的引用进行操作。</li><li>直接内存的分配不会受到Java堆大小的限制，但是，会受到本机总内存大小以及处理器寻址空间的限制。 </li></ul><h1 id="虚拟机对象"><a href="#虚拟机对象" class="headerlink" title="虚拟机对象"></a>虚拟机对象</h1><h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><ul><li>虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，则必须先执行相应的类加载过程。</li><li>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。</li><li>若Java堆中内存是绝对规整的，所有用过的内存放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器。分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离，这种分配方式称为”指针碰撞”。</li><li>若Java堆中内存并不是规整的，已使用过的内存和空闲内存相互交错，虚拟机就必须维护一个列表，记录上哪些内存块是可用的。在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。这种分配方式称为”空闲列表”。</li><li>Java堆是否规整由采用的垃圾收集器是否带有压缩整理功能决定。</li><li>修改一个指针所指向的位置，在并发情况下也并不是线程安全的，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存情况。</li><li>解决上述问题有两种方案：一种是对分配内存空间的动作进行同步处理——实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性。另一种是：把内存分配的动作安装线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓存(TLAB)。哪个线程要分配内存，就在哪个线程的TLAB上分配，终于TLAB用完并分配新的TLAB是，才需要同步锁定。</li><li>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值(不包括对象头)。该操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</li><li>虚拟机要对对象进行必要的设置。根据虚拟机当前的运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</li><li><code>&lt;init&gt;</code>方法还没有执行，所有的字段都还为零。执行new指令之后会接着执行<code>&lt;init&gt;</code>方法，把对象进行初始化。</li></ul><h2 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h2><p>对象在内存中存储的布局可以分为3块区域：<a href="#Header">对象头</a>、<a href="#ID">实例数据</a>和<a href="#Padding">对齐填充</a>。</p><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a><span id="Header">对象头</span></h3><ul><li>对象头包括两部分信息。</li><li>第一部分用于存储对象自身的运行时的数据。如哈希码、GC分代年龄、线程持有的锁、锁状态标志等。</li><li>第二部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</li><li>如果对象是一个数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过把普通Java对象的元数据信息确定Java对象的大小，但是从数据的元数据中却无法确定数组的大小。</li></ul><h3 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a><span id="ID">实例数据</span></h3><ul><li>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来还是在子类定义的，都需要记录。</li><li>虚拟机的存储顺序：相同宽度的字段总是分配到一起。在满足这个前提条件的情况下，在父类中定义的变量会出现在子类前。如果CompactFields参数值为true，那么子类之中较窄的变量也可能会插入到父类变量的空隙之中。</li></ul><h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a><span id="Padding">对齐填充</span></h3><ul><li>对齐填充并不是必然存在的，也没有特别的含义。仅仅起着占位符的作用。</li><li>对象的大小必须是8字节的整数倍。而对象头正好是8字节的倍数。当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</li></ul><h2 id="对象访问定位"><a href="#对象访问定位" class="headerlink" title="对象访问定位"></a>对象访问定位</h2><ul><li>Java程序需要通过栈上的reference数据来操作堆上的具体对象。</li><li>对象访问的方式有两种：句柄和直接指针。</li><li>句柄访问的话，那么Java堆中会划分一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含对象实例数据与类型数据各自的具体地址信息。</li><li>若使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址。</li><li>使用句柄来访问的组大好处就是reference中存储的是稳定的句柄地址，在对象被移动(垃圾收集)时只会改变句柄中的实例数据指针，而reference本身不需要修改</li><li>使用直接指针访问方式最大的好处是速度更快，节省了一次指针定位的时间开销。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人的运动范围</title>
      <link href="/2019/08/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"/>
      <url>/2019/08/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>地上有一个m行n列的方格。一个机器人从坐标(0, 0)的格子开始移动，它每一次可以向左、右、上、下移动一格，但不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格(35, 37)，因为3+5+3+7=18。但它不能进入方格(35, 38)，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试(多行多列矩阵中存在或者不存在路径，k为正数)</li><li>边界值测试(矩阵只有一行或只有一列；矩阵和路径中的所有字母都是相同的；k = 0)</li><li>特殊输入测试(k为负数)</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>和<a href="https://bruce0hh.github.io/2019/08/30/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/" target="_blank" rel="noopener">矩阵中的路径</a>相似，使用回溯法解决问题。</li><li>首先，将方格看成<em>m\</em>n*的二维数组。</li><li>机器人从(0,0)开始移动，当它移动到(i,j)时，通过检查坐标的数位和来判断机器人是否能够进入。</li><li>如果机器人能够进入，则判断它是否能进入相邻的四个格子。</li><li>如果不能，则退到上一个格子，重新遍历。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="DFS-1"><a href="#DFS-1" class="headerlink" title="DFS-1"></a>DFS-1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] next = &#123;&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">private</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> threshold;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[][] digitSum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cols;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> threshold)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rows == <span class="number">0</span> || cols == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    <span class="keyword">this</span>.cols = cols;</span><br><span class="line">    <span class="keyword">this</span>.threshold = threshold;</span><br><span class="line">    </span><br><span class="line">    initDigitSum();</span><br><span class="line">    <span class="keyword">boolean</span>[][] marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line">dfs(marked, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">boolean</span>[][] marked, <span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> threshold)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(r &lt; <span class="number">0</span> || r &gt;= rows || c &lt; <span class="number">0</span> || c &gt;= cols || marked[r][c])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    marked[r][c] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.digitSum[r][c] &gt; <span class="keyword">this</span>.threshold)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] n : next)&#123;</span><br><span class="line">        dfs(marked, r + n[<span class="number">0</span>], c + n[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDigitSum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] digitSumOne = <span class="keyword">new</span> <span class="keyword">int</span>[Math.max(rows, cols)];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digitSumOne.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = i;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            digitSumOne[i] += n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.digitSum = <span class="keyword">new</span> <span class="keyword">int</span>[rows][cols];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.rows; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.cols; j++)&#123;</span><br><span class="line">            <span class="keyword">this</span>.digitSum[i][j] = digitSumOne[i] + digitSumOne[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DFS-2"><a href="#DFS-2" class="headerlink" title="DFS-2"></a>DFS-2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, k;</span><br><span class="line">    <span class="keyword">boolean</span>[][] = visited;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.k = k;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> si, <span class="keyword">int</span> sj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || k &lt; si + sj || visited[i][j])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + dfs(i + <span class="number">1</span>, j, (i + <span class="number">1</span>) % <span class="number">10</span> != <span class="number">0</span> ? si + <span class="number">1</span> : si - <span class="number">8</span>, sj) + dfs(i, j + <span class="number">1</span>, si, (j + <span class="number">1</span>) % <span class="number">10</span> != <span class="number">0</span> ? sj + <span class="number">1</span> : sj - <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码实现细节讲解如下：（下面BFS实现原理讲解也在该地址）</p><p><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/mian-shi-ti-13-ji-qi-ren-de-yun-dong-fan-wei-dfs-b/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/mian-shi-ti-13-ji-qi-ren-de-yun-dong-fan-wei-dfs-b/</a></p></li></ul><h4 id="DFS-3"><a href="#DFS-3" class="headerlink" title="DFS-3"></a>DFS-3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">//建立辅助矩阵记录访问与否</span></span><br><span class="line">    <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>, m, n, k, visited);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* dfs参数</span></span><br><span class="line"><span class="comment">* i j为当前单位所在的行列数</span></span><br><span class="line"><span class="comment">* m n为该矩阵的行列数</span></span><br><span class="line"><span class="comment">* k为给定值的大小</span></span><br><span class="line"><span class="comment">* visited[][]为辅助矩阵</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">boolean</span> visited[][])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || (i/<span class="number">10</span> + i%<span class="number">10</span> + j/<span class="number">10</span> + j%<span class="number">10</span>) &gt; k || visited[i][j])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将访问过的单位记录下来</span></span><br><span class="line">    visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//递归记录每条路线数</span></span><br><span class="line">    <span class="keyword">return</span> dfs(i + <span class="number">1</span>, j, m, n, k, visited) + dfs(i - <span class="number">1</span>, j, m, n, k, visited) + </span><br><span class="line">        dfs(i, j + <span class="number">1</span>, m, n, k, visited) + dfs(i, j - <span class="number">1</span>, m, n, k, visited) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> LinkedList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">    queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(queue.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] x = queue.poll();</span><br><span class="line">        <span class="keyword">int</span> i = x[<span class="number">0</span>], j = x[<span class="number">1</span>], si = x[<span class="number">2</span>], sj = x[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || k &lt; si + sj || visited[i][j])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        res ++;</span><br><span class="line">        queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[](i + <span class="number">1</span>, j, (i + <span class="number">1</span>) % <span class="number">10</span> != <span class="number">0</span> ? si + <span class="number">1</span> : si - <span class="number">8</span>, sj);</span><br><span class="line">        queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[](i, j + <span class="number">1</span>, si, (j + <span class="number">1</span>) % <span class="number">10</span> != <span class="number">0</span> ? sj + <span class="number">1</span> : sj - <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维数组 </tag>
            
            <tag> DFS </tag>
            
            <tag> 回溯法 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵中的路径</title>
      <link href="/2019/08/30/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/08/30/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如在下面的3×4的矩阵中包含一条字符串“BCFE”的路径（路径中的字母用下划线标出）。但矩阵中不包含字符串“ABFB”的路径，因为字符串的第一个字符B占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p><a id="more"></a><p> A B T G<br> C F C S<br> J D E H</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试(多行多列矩阵中存在或者不存在路径)</li><li>边界值测试(矩阵只有一行或只有一列；矩阵和路径中的所有字母都是相同的)</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>首先，遍历矩阵，找到与字符串str中第一个字符相同的矩阵元素ch。</li><li>遍历ch的上下左右四个字符，若有和字符串str中下一个字符相同的，就把那个字符当做下一个字符，即下一次遍历的起点。</li><li>如果没有，则回退到上一个字符，重新遍历。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="DFS-1"><a href="#DFS-1" class="headerlink" title="DFS-1"></a>DFS-1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] next = &#123;&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cols;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">char</span>[] array, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">char</span>[] str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rows == <span class="number">0</span> || cols == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    <span class="keyword">this</span>.cols = cols;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span>[][] marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line">    <span class="keyword">char</span>[][] mtrix = buildMatrix(array);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(backtracking(matrix, str, marked, <span class="number">0</span>, i, j))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">char</span>[][] matrix, <span class="keyword">char</span>[] str, <span class="keyword">boolean</span>[][] marked, <span class="keyword">int</span> pathLen, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(pathLen == str.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span>(r &lt; <span class="number">0</span> || r &gt;= rows || c &lt; <span class="number">0</span> || c &gt;= cols || matrix[r][c] != str[pathLen] || marked[r][c])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    marked[r][c] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] n : next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(backtracking(matrix, str, marked, pathLen + <span class="number">1</span>, r + n[<span class="number">0</span>], c + n[<span class="number">1</span>]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        marked[r][c] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">char</span>[][] buildMatix(<span class="keyword">char</span>[] array)&#123;</span><br><span class="line">    <span class="keyword">char</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">char</span>[rows][cols];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, idx = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++)&#123;</span><br><span class="line">            matrix[i][j] = array[idx++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DFS-2"><a href="#DFS-2" class="headerlink" title="DFS-2"></a>DFS-2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="comment">//判断某一"起点"开始的字符串匹配是否符合要求</span></span><br><span class="line">                <span class="keyword">if</span>(dfs(board, words, i, j, <span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//i,j分别为矩阵的行列索引，k为匹配字符的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//剪枝，这条路径失败</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= board.length || i &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || j &lt; <span class="number">0</span> || board[i][j] != word[k]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//到达终点</span></span><br><span class="line">        <span class="keyword">if</span>(k == word.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">char</span> tmp = board[i][j];</span><br><span class="line">        <span class="comment">//修改board[i][j]为'/'，防止后续搜索时重复访问</span></span><br><span class="line">        board[i][j] = <span class="string">'/'</span>;</span><br><span class="line">        <span class="comment">//DFS顺序为下上右左，||表示只需一条可行路径</span></span><br><span class="line">        <span class="keyword">boolean</span> res = dfs(board, word, i + <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, word, i - <span class="number">1</span>, j, k + <span class="number">1</span>) || </span><br><span class="line">                      dfs(board, word, i, j + <span class="number">1</span>, k + <span class="number">1</span>) || dfs(board, word, i , j - <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//将tmp还原至board[i][j]元素</span></span><br><span class="line">        board[i][j] = tmp;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维数组 </tag>
            
            <tag> DFS </tag>
            
            <tag> 回溯法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法总结</title>
      <link href="/2019/08/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/08/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>常见的内部排序算法有：<a href="#bubble">冒泡排序</a>、<a href="#selete">选择排序</a>、<a href="#insert">插入排序</a>、<a href="shell">希尔排序</a>、<a href="#merge">归并排序</a>、<a href="#quick">快速排序</a>、<a href="#heap">堆排序</a>、<a href="#count">计数排序</a>、<a href="#bucket">桶排序</a>、<a href="#radix">基数排序</a>。</p><a id="more"></a><p>排序算法可以分为内部排序和外部排序。内部排序是数据记录在内存中进行排序；而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p><p><a href="https://imgchr.com/i/m3RQQf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/08/19/m3RQQf.jpg" alt="m3RQQf.jpg"></a></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>O($n^2$)：直接插入排序、直接选择排序和冒泡排序。</li><li>O($nlog^2n$)：快速排序、堆排序和归并排序。</li><li>O($n+k$)：k是介于0和1之间的常数。希尔排序。</li><li>O($n$)：基数排序、桶排序和箱排序。</li></ul><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><ul><li>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</li><li>不是稳定的排序算法：选择排序、希尔排序和堆排序。</li></ul><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><span id="bubble">冒泡排序</span></h1><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>比较相邻的元素。若第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作相同的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = ture;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                </span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a><span id="select">选择排序</span></h1><h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>首先在未排序序列中找到最小(大)元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小(大)元素，然后放到已排序序列的末尾。</li><li>重复第二步，知道所有元素均排序完毕。</li></ul><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="comment">//总共要经过arr.length-1次比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="comment">//每次需要比较的次数arr.length-i</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                <span class="comment">//记录目前能找到最小值元素的下标</span></span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将找到的最小值和i位置所在的值进行交换</span></span><br><span class="line">        <span class="keyword">if</span>(i != min) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">            arr[i] = arr[min];</span><br><span class="line">            arr[min] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a><span id="insert">插入排序</span></h1><h2 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>将第一个待排序序列的第一个元素看做一个有序序列，把第二个元素至最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描为排序序列，将扫描到的每个元素插入有序序列的适当位置。(如果待插入元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面)</li></ul><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//记录要插入的数据</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        <span class="comment">//从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; temp &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存在比其小的数，插入</span></span><br><span class="line">        <span class="keyword">if</span>(j != i) &#123;</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a><span id="shell">希尔排序</span></h1><h2 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>选择一个增量序列t1，t2，…….，tk，其中ti &gt; tj，tk = 1</li><li>按增量序列个数k，对序列进行k趟排序</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若个长度为m的子序列，分别对各子表进行直接插入排序。仅增量因子为1时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li><li>一般初次取序列的一半为增量，以后每次减半，直到增量为1。</li></ul><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">    <span class="keyword">int</span> gap = arr.length;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        gap = gap / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; gap; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = x + gap; i &lt; arr.length; i = i + gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                <span class="keyword">int</span> j;</span><br><span class="line">                <span class="keyword">for</span>(j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j = j - d) &#123;</span><br><span class="line">                    a[j + gap] = a[j];</span><br><span class="line">                &#125;</span><br><span class="line">                a[j + gap] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(gap == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a><span id="merge">归并排序</span></h1><h2 id="算法步骤-4"><a href="#算法步骤-4" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>申请空间，使其大小为两个已排序序列之和，该空间用来存放合并后的序列。</li><li>设定两个指针，最初位置分别为两个已排序序列的起始位置。</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置。</li><li>重复第三个步骤直到某一指针到达序列尾，将另一序列剩下的所有元素直接复制到合并序列尾。</li></ul><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向下取整</span></span><br><span class="line">    <span class="keyword">int</span> mid = (<span class="keyword">int</span>)Math.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span>[] left = Arrays.copyOfRange(arr, <span class="number">0</span>, mid);</span><br><span class="line">    <span class="keyword">int</span>[] right = Arrays.copyOfRange(arr, mid, arr.length);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sort(mergeSort(left),mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] left,<span class="keyword">int</span>[] right) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">            res[i++] = left[<span class="number">0</span>];</span><br><span class="line">            left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            res[i++] = right[<span class="number">0</span>];</span><br><span class="line">            right =  Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result[i++] = left[<span class="number">0</span>];</span><br><span class="line">        left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result[i++] = right[<span class="number">0</span>];</span><br><span class="line">        right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><span id="quick">快速排序</span></h1><h2 id="算法步骤-5"><a href="#算法步骤-5" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>从数列中挑出一个元素，称为”基准”。</li><li>重新排序数列，所有元素比基准值小的值排在基准前面，所有元素比基准值打的摆在基准值的后面。在这个分区退出之后，该基准就处于数列的中间位置，这个称为分区操作。</li><li>递归地把小于基准值元素的子数列和大于基准值元素的自数列排序。</li></ul><h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = partition(arr,left,right);</span><br><span class="line">        quickSort(arr, left,index - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, index + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = left;</span><br><span class="line">   <span class="keyword">int</span> index = p + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; arr[p]) &#123;</span><br><span class="line">            swap(arr, i, index);</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, p , index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a><span id="heap">堆排序</span></h1><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是大于(或小于)它的父节点。</p><h2 id="算法步骤-6"><a href="#算法步骤-6" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>创建一个堆H[0，1，……，n-1]。</li><li>把堆首(最大值)和堆尾互换。</li><li>把堆尺寸减一，并将新的数组顶端数据调整到相应位置。</li><li>重复上述第二步，知道堆尺寸为1。</li></ul><h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line">    buildMaxHeap(arr, len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        swap(arr, <span class="number">0</span>, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建最大堆，将堆中所有数据重新排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="keyword">int</span>)Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, i, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最大堆调整，将堆的末端子节点作调整，使得子节点永远小于父节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(left &lt; len &amp;&amp; arr[left] &gt; arr[max])&#123;</span><br><span class="line">        max = left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(right &lt; len &amp;&amp; arr[right] &gt; arr[max])&#123;</span><br><span class="line">        max = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max != i) &#123;</span><br><span class="line">        swap(arr, i, max);</span><br><span class="line">        heapify(arr, max, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a><span id="count">计数排序</span></h1><h2 id="算法步骤-7"><a href="#算法步骤-7" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>花<em>O(n)</em>的时间扫描整个序列A，获取最小值min和最大值max。</li><li>开辟一块新的空间创建新的数组B，长度是(max - min + 1)。</li><li>数组B中的index元素记录的值是A中某元素出现的次数</li><li>最后输出目标整数序列，具体的逻辑是遍历数组B，输出相应元素以及对应的个数</li></ul><h2 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(max &lt; value) &#123;</span><br><span class="line">            max = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> max = getMax(arr);</span><br><span class="line">    <span class="keyword">int</span> len = max + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> bucket = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> value : arr)&#123;</span><br><span class="line">        bucket[value]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(bucket[j] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            arr[index++] = j;</span><br><span class="line">            bucket[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a><span id="bucket">桶排序</span></h1><h2 id="算法步骤-8"><a href="#算法步骤-8" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>设置固定数量的空桶。</li><li>把数据放到对应的桶中。</li><li>对每个不为空的桶中数据进行排序。</li><li>拼接不为空的桶中数据，得到结果。</li></ul><h2 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BucketSort</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 根据桶的个数来确定hash函数，这份代码适合桶的个数等于数组长度</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> element,<span class="keyword">int</span> max,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (element * length)/(max+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = arr.length;</span><br><span class="line">        LinkedNode[] bucket = <span class="keyword">new</span> LinkedNode[length];  <span class="comment">// 桶的个数等于length</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];  <span class="comment">// 求max</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i]&gt;max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 入桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> value = arr[i];  <span class="comment">// 扫描每个元素</span></span><br><span class="line">            <span class="keyword">int</span> hash = hash(arr[i], max, length);  <span class="comment">// 桶的下标</span></span><br><span class="line">            <span class="keyword">if</span> (bucket[hash]==<span class="keyword">null</span>) &#123;</span><br><span class="line">                bucket[hash] = <span class="keyword">new</span> LinkedNode(value);  <span class="comment">// 初始化链表</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                insertInto(value,bucket[hash],bucket,hash);  <span class="comment">// 插入链表</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>; <span class="comment">// 记录数组下标</span></span><br><span class="line">        <span class="comment">// 出桶，回填arr</span></span><br><span class="line">        <span class="keyword">for</span>(LinkedNode node:bucket)&#123;</span><br><span class="line">            <span class="keyword">if</span> (node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    arr[k++] = node.value;</span><br><span class="line">                    node = node.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertInto</span><span class="params">(<span class="keyword">int</span> value, LinkedNode head, LinkedNode[] bucket, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">        LinkedNode newNode = <span class="keyword">new</span> LinkedNode(value);</span><br><span class="line">        <span class="comment">// 小于头节点，放在头上</span></span><br><span class="line">        <span class="keyword">if</span> (value&lt;=head.value) &#123;</span><br><span class="line">            newNode.next = head;</span><br><span class="line">            <span class="comment">// 替换头节点</span></span><br><span class="line">            bucket[hash] = newNode;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 往后找第一个比当前值大的节点，放在这个节点的前面</span></span><br><span class="line">        LinkedNode p = head;</span><br><span class="line">        LinkedNode pre = p;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>&amp;&amp;value&gt;p.value)&#123;</span><br><span class="line">            pre = p;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;  <span class="comment">// 跑到末尾了</span></span><br><span class="line">            pre.next = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;             <span class="comment">// 插入pre和p之间</span></span><br><span class="line">            pre.next = newNode;</span><br><span class="line">            newNode.next = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a><span id="radix">基数排序</span></h1><h2 id="算法步骤-9"><a href="#算法步骤-9" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>将所有待比较数值(正整数)统一为同样的数位长度，数位较短的数前面补零。</li><li>从最低位开始，依次进行一次排序。</li><li>从最低位排序一直到最高位排序完成后，数列就变成一个有序序列。</li></ul><h2 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现基数排序 LSD-从最低位开始排 MSD-从最高位开始排</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxBin = maxBin(data);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i  = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, factor = <span class="number">1</span>; i &lt; maxBin; factor *= <span class="number">10</span>, i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; data.length; j ++) &#123;</span><br><span class="line">                list.get((data[j]/factor)%<span class="number">10</span>).add(data[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>; j &lt; list.size(); j ++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(!list.get(j).isEmpty()) &#123;</span><br><span class="line">                    data[k] = list.get(j).get(<span class="number">0</span>);</span><br><span class="line">                    list.get(j).remove(<span class="number">0</span>);</span><br><span class="line">                    k ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算数组里元素的最大位数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxBin</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = Integer.toString(data[i]).length();</span><br><span class="line">            maxLen =  size &gt; maxLen ? size : maxLen;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转数组的最小数字</title>
      <link href="/2019/08/06/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
      <url>/2019/08/06/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3, 4, 5, 1, 2}为{1, 2, 3, 4, 5}的一个旋转，该数组的最小值为1。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>边界值测试</li><li>特殊输入测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>二分查找：<code>mid = low + (high - low) / 2</code>，需要考虑三种情况：</p><ol><li><p><code>array[mid] &gt; array[high]</code></p><p>出现这种情况的array类似<code>[3,4,5,6,0,1,2]</code>，此时最小数字一定在mid的右边。</p><p><code>low = mid + 1</code></p></li><li><p><code>array[mid] == array[high]</code></p><p>出现这种情况的array类似 <code>[1,0,1,1,1]</code> 或者<code>[1,1,1,0,1]</code>，此时最小数字不好判断在mid左边</p><p>还是右边，这时只好一个一个试 。</p><p><code>high = high - 1</code></p></li><li><p><code>array[mid] &lt; array[high]</code></p><p> 出现这种情况的array类似<code>[2,2,3,4,5,6,6]</code>，此时最小数字一定就是array[mid]或者在mid的左边。因为右边必然都是递增的。</p><p><code>high = mid</code></p></li></ol><p>若待查询范围的最后只剩两个数，那么mid一定会指向下标靠前的数字，比如：array = [4,6]，array[mid] = 4，array[high] = 6；如果high = mid - 1，就会产生错误，因此，high = mid。但情形(1)中low = mid + 1就不会有错误。</p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a>代码一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(array[mid] &gt; array[high]) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[mid] == array[high]) &#123;</span><br><span class="line">                high = high - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a>代码二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[low] == nums[mid] &amp;&amp; nums[mid] == nums[high]) &#123;</span><br><span class="line">                <span class="keyword">return</span> minNumber(nums,low,high);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt;= nums[high])&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">minNumber</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; high; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i + <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">return</span> nums[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="/2019/08/05/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2019/08/05/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><a href="#fib">求斐波那契数列的第n项</a>：写一个函数，输入n，求斐波那契（Fibonacci）数列的第n项。</li><li><a href="#frog">青蛙跳台阶问题</a>：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</li><li><a href="#extend">扩展题目</a></li></ul><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试</li><li>边界值测试</li><li>性能测试</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><span id="fib">斐波那契数列</span></h3><ul><li>直接使用递归函数有很严重的效率问题，时间复杂度是以n的指数的方式递增的。</li><li>要避免重复计算，采用从下往上计算，可以把计算过了的保存起来，下次要计算时就不必重复计算了：先由f(0)和f(1)计算f(2)，再由f(1)和f(2)计算f(3)……以此类推就行了，计算第n个时，只要保存第n-1和第n-2项就可以了。</li></ul><h3 id="青蛙跳台阶"><a href="#青蛙跳台阶" class="headerlink" title="青蛙跳台阶"></a><span id="frog">青蛙跳台阶</span></h3><ul><li>考虑最简单的情况，只有1级阶梯时，只有一种跳法；2级阶梯时，显然只有两种跳法。</li><li>一般情况我们把n级台阶看成函数f(n),当n&gt;2时，最后一次跳的时候有两种情况，可能是从n-1级台阶跳上去的；或是从n-2级台阶跳上去的。此时，n级台阶跳法数目可以记作：f(n) = f(n-1) + f(n-2)，我们不难看出这是斐波那契数列。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">Fib</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">Fib</span> <span class="params">(<span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> pre1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> pre2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> fib = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fib = pre1 + pre2;</span><br><span class="line">        pre2 = pre1;</span><br><span class="line">        pre1 = fib;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><span id="extend">扩展</span></h2><ul><li><a href="#rectangle">矩形覆盖</a>：用n个2*1的小矩形横着或竖着无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</li><li><a href="#frog2">青蛙跳台阶2</a>：一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法？</li></ul><h3 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a><span id="rectangle">矩形覆盖</span></h3><p>当用1个矩形去覆盖大矩形时的最左边有两种选择：横着放或竖着放。当横着放时，左下角也必须横放着一个小矩形，右边剩余2*(n-2)矩形区域；当竖着放时，右边剩余2*(n-1)矩形区域。因此，我们将覆盖方法写成：f(n) = f(n-1) + f(n-2)，这仍然是斐波那契数列。</p><h3 id="青蛙跳台阶2"><a href="#青蛙跳台阶2" class="headerlink" title="青蛙跳台阶2"></a><span id="frog2">青蛙跳台阶2</span></h3><p>跳上n级台阶，可以从n-1级跳上去，也可以从n-2级跳上去，那么</p><p><code>f(n) = f(n-1) + f(n-2) +...+ f(0)</code>  </p><p>同样，跳上n-1级台阶，可以从n-2级跳上去,也可以从n-3级跳上去，那么</p><p><code>f(n-1) = f(n-2) + f(n-3) +...+ f(0)</code>  </p><p>综上可得 <code>f(n) = f(n-1) * 2</code> ,f(n)是个等比数列。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num; i++)&#123;</span><br><span class="line">        res *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个栈实现队列</title>
      <link href="/2019/08/05/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2019/08/05/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数appendTail和deleteHead，分别完成在队列尾部插入结点和在队列头部删除结点的功能。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>在空的队列里添加、删除元素。</li><li>往非空的队列里添加、删除元素。</li><li>连续删除元素直至队列为空。</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>将两个栈分别设置为in栈和out栈，in栈用来处理入栈(push)操作，out栈则用来处理(pop)操作。一个元素进入in栈之后，出栈的顺序被反转。当元素要出栈时，需要先进入out栈，此时元素出栈顺序再一次被反转，因此出栈顺序就和最开始入栈顺序是相同的，先进入元素先退出——“先进先出”，这就是队列的顺序。需要注意的是，当out栈中还有元素时，in栈元素不能进入；当out栈没有元素时，in栈的所有元素都必须进入out栈中，否则顺序会被打乱。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; in = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; out = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        in.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(out.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!in.isEmpty())&#123;</span><br><span class="line">                out.push(in.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(out.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span>.<span class="keyword">new</span> Exception(<span class="string">"queue is empty !"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> out.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stack1 = []</span><br><span class="line">        self.stack2 = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self,node)</span>:</span></span><br><span class="line">        self.stack1.append(node)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stack1) == <span class="number">0</span> <span class="keyword">and</span> len(self.stack2) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> len(self.stack2) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">while</span> len(self.stack1) &gt; <span class="number">0</span>:</span><br><span class="line">                self.stack2.append(self.stack1.pop())</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> self.stack2.pop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的下一个节点</title>
      <link href="/2019/08/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
      <url>/2019/08/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一棵二叉树和其中的一个结点，如何找出中序遍历顺序的下一个结点？ 树中的结点除了有两个分别指向左右子结点的指针以外，还有一个指向父结点的指针。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>普通二叉树(完全二叉树；不完全二叉树)</li><li>特殊二叉树(所有节点都没有左(右)子节点的二叉树；只有一个节点的二叉树；二叉树根节点指针为空)</li><li>不同位置的节点的下一个节点(下一个节点为当前节点的右子节点、右子树的最左子节点、跨层父节点等；当前节点没有下一个节点)</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><strong>如果一个节点有右子树</strong>，那么它的下一个节点就是它的右子树的最左子节点。也就是说，从右子节点出发一直沿着指向左子节点的指针，我们就能找到它的下一个节点。</li><li><strong>一个节点没有右子树的情形。如果节点是它父节点的左子节点</strong>，那么它的下一个节点就是它的父节点。</li><li><strong>如果一个节点既没有右子树，并且它还是它父节点的右子节点</strong>。那么，我们可以沿着指向父节点的指针一直向上遍历，直到找到一个是它父节点的节点。如果这样的节点存在，那么这个父节点就是我们要找的下一个节点。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextNodeInBinaryTrees</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeLinkNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeLinkNode left = <span class="keyword">null</span>;</span><br><span class="line">        TreeLinkNode right = <span class="keyword">null</span>;</span><br><span class="line">        TreeLinkNode parent = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        TreeLinkNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeLinkNode <span class="title">GetNext</span><span class="params">(TreeLinkNode pNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pNode = pNode.right;</span><br><span class="line">            <span class="keyword">while</span> (pNode.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pNode = pNode.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (pNode.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pNode == pNode.parent.left) &#123;</span><br><span class="line">                <span class="keyword">return</span> pNode.parent;</span><br><span class="line">            &#125;</span><br><span class="line">            pNode = pNode.parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重建二叉树</title>
      <link href="/2019/08/04/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2019/08/04/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设，输入的前序遍历和中序遍历的结果中都不含重复的数字。例如，输入前序遍历序列{1, 2, 4, 7, 3, 5, 6, 8}和中序遍历序列{4, 7, 2, 1, 5, 3, 8, 6}，则重建出其二叉树并输出它的头结点。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>普通二叉树(完全二叉树；不完全二叉树)</li><li>特殊二叉树(所有节点都为左(右)的二叉树；只有一个节点的二叉树)</li><li>特殊输入(二叉树根节点指针为空；输入的前序遍历和中序遍历不匹配)</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>前序遍历数组的第一个数字就是根节点的值。扫描中序遍历数组，就能确定根节点的值的位置。根据中序遍历的特点，在根节点之前的为左子树节点的值，之后的位右子树节点的值。</p><p>前序遍历：[1, <strong>2</strong>, <strong>4</strong>,<strong>7</strong>,<em>3</em>,<em>5</em>, <em>6</em>, <em>8</em> ]<br>中序遍历：[<strong>4</strong>, <strong>7</strong>, <strong>2</strong>, 1, <em>5</em>, <em>3</em>, <em>8</em>, <em>6</em> ]</p><p>1为根节点，故中序遍历中1左边3个数字为左子树，右边4个为右子树。</p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存中序遍历数组每个值对应的索引</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer,Integer&gt; indexForInOrders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//两个数组参数，pre[]前序数组，in[]中序数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span>[] pre,<span class="keyword">int</span>[] in)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; in.length; i++) &#123;</span><br><span class="line">        indexForinOrders.put(in[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reConstructBinaryTree(pre,<span class="number">0</span>,pre.length - <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* preL 前序数组开始的位置</span></span><br><span class="line"><span class="comment">* preR 前序数组中结束的位置</span></span><br><span class="line"><span class="comment">* inL 中序数组中开始的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span> preL, <span class="keyword">int</span> preR, <span class="keyword">int</span> inL)</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span>(preL &gt; preR)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根节点的值为前序遍历的第一个值</span></span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(pre[preL]);</span><br><span class="line">    <span class="comment">//查找出根节点值在中序遍历数组中的索引</span></span><br><span class="line">    <span class="keyword">int</span> inindex = indexForinOrders.get(root.val);</span><br><span class="line">    <span class="comment">//左子树长度=中序数组中根节点索引位置-开始位置，inL初始为0</span></span><br><span class="line">    <span class="keyword">int</span> leftTreeSize = inindex - inL;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归</span></span><br><span class="line">    root.left = reConstructBinaryTree(pre,preL + <span class="number">1</span>,preL + leftTreeSize,inL);</span><br><span class="line">    root.right = reConstructBianryTree(pre,preL + leftTreeSize + <span class="number">1</span>,preR,inL + leftTreeSize + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/22/3QSz0e.md.png" alt="3QSz0e.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从尾到头打印链表</title>
      <link href="/2019/08/03/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/08/03/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个链表的头节点，从尾到头反过来打印出每个节点的值。(不能改变链表的结构)</p><a id="more"></a><p>链表定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    ListNode(<span class="keyword">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>功能测试(输入链表有多个节点；输入链表只有一个节点)</li><li>特殊输入测试(输入链表头节点为空)</li><li>二维数组中不包含查找的数字</li><li>特殊输入(输入空指针)</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>解决该问题必须要遍历链表。遍历顺序为从头到尾，而输出顺序为从尾到头。这就是典型的”先进后出”。我们可以用栈实现这种顺序。每经过一个节点时，把该节点放到一个栈中，当遍历完整个链表后，再从栈顶开始逐个输出节点的值。</li><li>递归在本质上是一个栈。要实现反过来输出链表，我们每访问一个节点的时候，先递归输出它后面的节点，再输出它本身。</li><li>头插法是利用链表输出逆序的特点。头节点是在头插法使用一个额外的节点，该节点不存储任何值。第一个节点则是链表的第一个真正存储值的节点。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArrayList &lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123;</span><br><span class="line"><span class="comment">//使用栈这种数据结构</span></span><br><span class="line">        Stack &lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt; ();</span><br><span class="line">    <span class="comment">//将链表元素全部放入栈里</span></span><br><span class="line">        <span class="keyword">while</span> (listNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.add(listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//创建链表，并将栈中的元素取出放入链表中</span></span><br><span class="line">        ArrayList &lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            ret.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Interger&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (listNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.printListFromTailToHead(listNode.next);</span><br><span class="line">            arrayList.add(listNode.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//头插法构建逆序链表</span></span><br><span class="line">    ListNode head = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (listNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode memo = listNode.next;</span><br><span class="line">        listNdoe.next = head.next;</span><br><span class="line">        head.next = listNode;</span><br><span class="line">        listNode = memo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构建ArrayList</span></span><br><span class="line">    ArrayList&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    head = head.next;</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">        ret.add(head.val);</span><br><span class="line">       head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line">       </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment">#返回从尾到头的列表值序列，如[1,2,3]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self,listNode)</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> listNode:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        result = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> listNode:</span><br><span class="line">            result insert(<span class="number">0</span>,listNode val)</span><br><span class="line">            listNode = listNode.next</span><br><span class="line">  <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>替换空格</title>
      <link href="/2019/08/03/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
      <url>/2019/08/03/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数，把字符串中的每个空格替换成”%20”。例如输入“We are happy.”，则输出“We%20are%20happy.”。</p><a id="more"></a><p>本题目要求在原有字符串上进行修改。</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>输入的字符串中包含空格(包括空格位于首尾；字符串有连续多个空格)</li><li>输入的字符串中没有空格</li><li>特殊输入测试(字符串只有一个空格字符等)</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>从前往后将字符串替换复制，假设字符串长度是n，对于每个空格字符，需要移动后<em>O(n)</em>个字符。对于含有<em>O(n)</em>个空格字符的字符串，时间复杂度为<em>O($N^2$)</em>。</li><li>转换思路，我们从后往前将字符串替换复制。先计算新字符串的长度，从字符串后面开始复制和替换，这样，每个字符只需复制一次即可。时间复杂度为<em>O(N)</em>。另外，要注意“%20”为逆序。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法的输入为StringBuffer（String无法改变长度，所以采用StringBuffer）,输出为String</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将字符串数据进行处理</span></span><br><span class="line">    String str1 = str.toString();</span><br><span class="line">    <span class="keyword">if</span> (str1.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> str1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断字符串中包含有几个空格</span></span><br><span class="line">    <span class="keyword">char</span>[] strArray = str1.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lengthSpace = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; strArray.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strArray[i] == <span class="string">' '</span>)&#123;</span><br><span class="line">            lengthSpace ++;</span><br><span class="line">        &#125;</span><br><span class="line">        i ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个空格替换成两个字符，重新申请字符串大小</span></span><br><span class="line">    <span class="keyword">int</span> newStrLength = strArray.length + lengthSpace * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">char</span>[] newStr = <span class="keyword">new</span> charchar[newStrLength];</span><br><span class="line">    <span class="comment">//双指针</span></span><br><span class="line">    <span class="keyword">int</span> i = strArray.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = newStrLength.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//字符串从后往前复制</span></span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strArray[i] != <span class="string">' '</span>)&#123;</span><br><span class="line">            newStr[j --] = strArray[i --];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newStr[j --] = <span class="string">'0'</span>;</span><br><span class="line">            newStr[j --] = <span class="string">'2'</span>;</span><br><span class="line">            newStr[j --] = <span class="string">'%'</span>;</span><br><span class="line">            i --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StringString(newStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self,s)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(s,str) <span class="keyword">or</span> len(s) &lt;= <span class="number">0</span> <span class="keyword">or</span> s == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    spaceNum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">" "</span></span><br><span class="line">        spaceNum += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    newStrLen = len(s) + spaceNum * <span class="number">2</span></span><br><span class="line">    newStr = newStrLen * [<span class="literal">None</span>]</span><br><span class="line">    indexOfOriginal,indexOfNew = len(s) - <span class="number">1</span>, newStrLen - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span> indexOfNew &gt;= <span class="number">0</span> <span class="keyword">and</span> indexOfOriginal &lt;= indexOfNew:</span><br><span class="line">        <span class="keyword">if</span> s[indexOfOriginal] == <span class="string">' '</span>:</span><br><span class="line">            newStr[indexOfNew - <span class="number">2</span>:indexOfNew + <span class="number">1</span>] = [<span class="string">'%'</span>,<span class="string">'2'</span>,<span class="string">'0'</span>]</span><br><span class="line">            indexOfNew -= <span class="number">3</span></span><br><span class="line">            indexOfOriginal -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            newStr[indexOfNew] = s[indexOfOriginal]</span><br><span class="line">            indexOfNew -= <span class="number">1</span></span><br><span class="line">            indexOfOriginal -= <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> join(newStr)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组中的查找</title>
      <link href="/2019/08/03/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>/2019/08/03/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>二维数组中包含查找的数字</li><li>二维数组中不包含查找的数字</li><li>特殊输入(输入空指针)</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>暴力求解即可，时间复杂度为<em>O($N^2$)</em>。</p></li><li><p>首先选取数组右上角的数字，如果该数字等于要查找的数字，则查找过程结束；若大于该数字大于要查找的数字，则提出这个数字所在列；如果该数字小于要查找的数字，则提出这个数字所在的行。也就是说，如果要查找的数字不在数组的右上角，则每一次都在数组的查找范围剔除一行或一列，这样每一步都能缩小查找范围，直到找到要查找的数字，或者查找范围为空。</p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> rows = nums.length;</span><br><span class="line">    <span class="keyword">int</span> cols = nums[<span class="number">0</span>].length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (nums != <span class="keyword">null</span> &amp;&amp; rows &gt; <span class="number">0</span> &amp;&amp; cols &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> col = cols - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (row &lt; rows &amp;&amp; col &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[row][col] == number) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[row][col] &gt; number) &#123;</span><br><span class="line">                col --;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                row ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度是<em>O(M+N)</em>，空间复杂度是<em>O(1)</em>。</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(self,num,arr)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> arr == []:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">       row = len(arr)</span><br><span class="line">        col = len(arr[<span class="number">0</span>])</span><br><span class="line">       i = col - <span class="number">1</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &lt; row:</span><br><span class="line">            <span class="keyword">if</span> arr == num:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> arr[j][i] &gt; num:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                j += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习-TodoList实现</title>
      <link href="/2019/08/02/React%E5%AD%A6%E4%B9%A0-TodoList%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/08/02/React%E5%AD%A6%E4%B9%A0-TodoList%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="开启React应用"><a href="#开启React应用" class="headerlink" title="开启React应用"></a>开启React应用</h2><p>在React应用的根目录下，使用Git Shall输入<code>nmp start</code>即可,React App的默认打开端口是3000</p><a id="more"></a><h2 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h2><p>index.js<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//引入React库 组件语法</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大写字母开头都为组件</span></span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'./TodoList'</span>;</span><br><span class="line"><span class="comment">//渲染root节点</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">TodoList</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure></p><p>TodoList.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个react组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="comment">//return只能返回一个整体的jsx结构</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">      <span class="comment">//jsx里面只能写表达式，不能写语句</span></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Hello World!</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/导入导出配对使用</span></span><br><span class="line"><span class="regexp">export default TodoList;</span></span><br></pre></td></tr></table></figure><hr><h2 id="实现TodoList基本功能"><a href="#实现TodoList基本功能" class="headerlink" title="实现TodoList基本功能"></a>实现TodoList基本功能</h2><p><strong>React特性</strong></p><ul><li><p>React强调数据编程，无需直接操作DOM</p></li><li><p>jsx中写js表达式，必须用{}包裹函数名  </p></li></ul><p><strong>重点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">//state存储数据内容</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      list:[</span><br><span class="line">        <span class="string">'learn react'</span>,</span><br><span class="line">        <span class="string">'learn vue'</span>,</span><br><span class="line">        <span class="string">'learn angular'</span>,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>构造一个constructor函数，该函数在组件被创建的时候，构造函数会自动被执行，super做初始化，state是数据项，存储数据内容</p><hr><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非原生onclick，而是react的onClick</span></span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.handBtnClick&#125;&gt;add&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><p>此时该this的指向为父节点，即button，而非state，指向数据是错误的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;this.handBtnClick.bind(this)&#125;&gt;add&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>现在将第一个this绑定为最外层的this，指向constructor构造器里的this  </p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">handBtnClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      <span class="comment">//将包含原state中的内容</span></span><br><span class="line">      <span class="comment">//...为展开运算符</span></span><br><span class="line">      list:[...this.state.list,<span class="string">'hello world!'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>React中不要直接通过this.state来改变state中的数据，React提供了一个方法this.setState来使用</p><hr><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每当数据改变，react将会重新渲染render()</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="comment">//return只能返回一个整体的&lt;div&gt;&lt;/div&gt;结构</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">      <span class="comment">//jsx里面只能写表达式，不能写语句</span></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;input /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handBtnClick.bind(<span class="keyword">this</span>)&#125;&gt;add&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">this</span>.state.list.map(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>map是对list数组做循环的函数，数组中的每一项都会放到item参数中去，现在我们先把key值暂时设置为map中的index索引/下标。</p><h2 id="新增列表的完善"><a href="#新增列表的完善" class="headerlink" title="新增列表的完善"></a>新增列表的完善</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">//state存储数据内容</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      list: [],</span><br><span class="line">      inputValue: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在state中添加新的变量inputValue，该变量保存输入框里的值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">       &lt;input onChange=&#123;<span class="keyword">this</span>.handleInputChange.bind(<span class="keyword">this</span>)&#125;/&gt;</span><br><span class="line">       &lt;button onClick=&#123;<span class="keyword">this</span>.handBtnClick.bind(<span class="keyword">this</span>)&#125;&gt;add&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>在input标签里添加一个onChange事件，当inputValue改变，handleInputChange就会执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">handleInputChange(e)&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      inputValue: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>handleInputChange接受一个事件对象，当inputValue改变就获取输入框里的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">handBtnClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      list:[...this.state.list,<span class="keyword">this</span>.state.inputValue],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这时handleBtnClick的数据列表里，list将添加inputValue的值。</p><h3 id="输入结束后清空input框中的内容"><a href="#输入结束后清空input框中的内容" class="headerlink" title="输入结束后清空input框中的内容"></a>输入结束后清空input框中的内容</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input value=&#123;<span class="keyword">this</span>.state.inputValue&#125; onChange=&#123;<span class="keyword">this</span>.handleInputChange.bind(<span class="keyword">this</span>)&#125;/&gt;</span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.handBtnClick.bind(<span class="keyword">this</span>)&#125;&gt;add&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>此时，将&lt;input&gt;的value值绑定为inputValue的值,当inputValue的值改变，input框中的值也改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">handBtnClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      <span class="comment">//将包含原state中的内容</span></span><br><span class="line">      <span class="comment">//...为展开运算符</span></span><br><span class="line">      list:[...this.state.list,<span class="keyword">this</span>.state.inputValue],</span><br><span class="line">      inputValue: <span class="string">''</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当点击add按钮提交时，handBtnClick()事件执行，inputValue值变为空，此时input框中的值也为空。</p><h2 id="删除列表项"><a href="#删除列表项" class="headerlink" title="删除列表项"></a>删除列表项</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.list.map(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleItemClilck.bind(this,index)&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>为了实现点击列表项即可删除的功能，在&lt;li&gt;标签中添加onClick事件，当点击时，执行handleItemClick方法，并将index下标作为参数传入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">handleItemClilck(index)&#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">this</span>.state.list</span><br><span class="line">    list.splice(index,<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//ES6中，当两键值变量名相同时，可以使用下列写法简写</span></span><br><span class="line">    <span class="comment">//this.setState(list)</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      list:list</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>handleItemClick接受index参数，获取list的值，调用splic方法删除该项，该方法copy原数据项进行删除操作而非直接操作state里的list，是为了性能和可调试性更优。</p><h2 id="React组件的拆分"><a href="#React组件的拆分" class="headerlink" title="React组件的拆分"></a>React组件的拆分</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.list.map(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">key</span> = <span class="string">&#123;index&#125;</span> <span class="attr">content</span> = <span class="string">&#123;item&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>将列表中每一项作为组件拆分，返回&lt;TodoItem&gt;组件，设置key值和传递参数项content属性，content的值即list的item。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;li&gt;&#123;<span class="keyword">this</span>.props.content&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoItem</span><br></pre></td></tr></table></figure><p>新建TodoItem.js,render返回JSX。<strong>父组件通过属性的形式向子组件传递参数</strong>，<strong>子组件通过props接受父组件传递过来的参数</strong>。</p><h2 id="优化子组件"><a href="#优化子组件" class="headerlink" title="优化子组件"></a>优化子组件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.list.map(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">delete</span>=<span class="string">&#123;this.handleDelete.bind(this)&#125;</span> <span class="attr">index</span>=<span class="string">&#123;index&#125;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">content</span>=<span class="string">&#123;item&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>父组件使用TodoItem子组件时，传递handleDelete方法给子组件，属性名为delete(属性名自定义)。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleDelete()&#123;</span><br><span class="line">        <span class="comment">//子组件调用handleDelete方法，将index作为参数传值</span></span><br><span class="line">        <span class="keyword">this</span>.props.delete(<span class="keyword">this</span>.props.index);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;li onClick=&#123;<span class="keyword">this</span>.handleDelete.bind(<span class="keyword">this</span>)&#125;&gt;&#123;<span class="keyword">this</span>.props.content&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在子组件中绑定onClick事件，将handleDelete方法写入。<strong>子组件若想要和父组件通信，子组件要调用父组件传过来的方法</strong>。此时子组件调用父组件的delete方法，参数为父组件传过来的下标index。</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h3 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoItem <span class="keyword">from</span> <span class="string">'./TodoItem'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      list: [],</span><br><span class="line">      inputValue: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.handleInputChange = <span class="keyword">this</span>.handleInputChange.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.handBtnClick = <span class="keyword">this</span>.handBtnClick.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.handleDelete = <span class="keyword">this</span>.handleDelete.bind(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handBtnClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      list:[...this.state.list,<span class="keyword">this</span>.state.inputValue],</span><br><span class="line">      inputValue: <span class="string">''</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleInputChange(e)&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      inputValue: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleDelete(index)&#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">this</span>.state.list</span><br><span class="line">    list.splice(index,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">this</span>.setState(list)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getTodoItems()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      <span class="keyword">this</span>.state.list.map(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;TodoItem </span><br><span class="line">          <span class="keyword">delete</span>=&#123;<span class="keyword">this</span>.handleDelete&#125; </span><br><span class="line">          index=&#123;index&#125; </span><br><span class="line">          key=&#123;index&#125; </span><br><span class="line">          content=&#123;item&#125; </span><br><span class="line">          /&gt;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;input value=&#123;<span class="keyword">this</span>.state.inputValue&#125; onChange=&#123;<span class="keyword">this</span>.handleInputChange&#125;/&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handBtnClick&#125;&gt;add&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;&#123;<span class="keyword">this</span>.getTodoItems()&#125;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h3 id="TodoItem-js"><a href="#TodoItem-js" class="headerlink" title="TodoItem.js"></a>TodoItem.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.handleDelete = <span class="keyword">this</span>.handleDelete.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleDelete()&#123;</span><br><span class="line">        <span class="comment">/*delete是保留关键字，暂时不更改</span></span><br><span class="line"><span class="comment">         * const &#123;delete,index&#125; = this.props;</span></span><br><span class="line"><span class="comment">         * delete(index);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>.props.delete(<span class="keyword">this</span>.props.index);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;content&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> ( </span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;li onClick=&#123;<span class="keyword">this</span>.handleDelete&#125;&gt;&#123;content&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoItem</span><br></pre></td></tr></table></figure><p>代码规范里主要将bind绑定this移至constructor构造器中，在父组件中将子组件作为一个函数引用，简化了render()里的代码。另外，在子组件的变量赋值中，使用了ES6中的解构赋值，使得代码更加精简。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不修改数组找出重复的数字</title>
      <link href="/2019/08/02/%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2019/08/02/%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个长度为n+1的数组里的所有数字都在1到n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2, 3, 5, 4, 3, 2, 6, 7}，那么对应的输出是重复的数字2或者3。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>1.数组中带一个或多个重复数字</p><p>2.数组中不包含重复的数字</p><p>3.无效输入测试用例（空数组，数组数字越界等）</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们将1~n的数字从中间的数字m分为两部分，前面一半1~mid,后面一半为m+1~n。如果1~m的数字的数目超过m，那么这一半的区间里一定包含重复的数字；否则，另一半m+1~n的区间里一定包含重复的数字。我们可以继续把包含重复数字的区间一分为二，直到找到一个重复的数字。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDuplication</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> high = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>,res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//统计[low,mid]之间元素的个数</span></span><br><span class="line">        res = count(nums, low, mid);</span><br><span class="line">        <span class="comment">//如果[low,mid]之间有重复数字</span></span><br><span class="line">        <span class="keyword">if</span>(res &gt; mid - low + <span class="number">1</span>) &#123;</span><br><span class="line">            high = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//否则，[mid+1,high]之间有重复数字</span></span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计nums中[low,high]范围内元素的个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= low &amp;&amp; i &lt;= high) &#123;</span><br><span class="line">            ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码按照二分查找的思路，若输入长度为n的数组，那么函数count将被调用<em>O(logn)<em>次，每次需要</em>O(n)<em>的时间，因此总时间复杂度是</em>O(nlogn)</em>,空间复杂度为<em>O(1)</em>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中重复的数字</title>
      <link href="/2019/07/31/%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2019/07/31/%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p><a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>长度为n的数组里包含一个或多个重复的数字</li><li>数组中不包含重复的数字</li><li>无效输入用例（输入空指针；长度为n的数组中包含0~n-1之外的数字）</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>对于这种数组元素在[0,n-1]范围内的问题，可以将值为i的元素调整到第i个位置上进行求解。</li><li>利用哈希表解决问题，遍历数组，如果哈希表里还没有这个数字，就把它加入哈希表；否则，找到一个重复数字。</li><li>可以将数组排序，遍历数组即可。排序一个长度为n的数组需要<em>O(nlogn​)</em>的时间。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nums数组，length数组长度，duplication重复数字数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> length, <span class="keyword">int</span>[] duplication)</span></span>&#123;</span><br><span class="line">    <span class="comment">//对数据进行处理</span></span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || length &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length, i++)&#123;</span><br><span class="line">        <span class="comment">//判断数字m是否与其下标i相等</span></span><br><span class="line">        <span class="keyword">while</span>(nums[i] != i)&#123;</span><br><span class="line">            <span class="comment">//判断m与下标为m的数字是否相等</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[nums[i]]) &#123;</span><br><span class="line">                <span class="comment">//相等则将重复的数字放入数组duplication[0]中</span></span><br><span class="line">                duplication[<span class="number">0</span>] = nums[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不相等则交换数字，继续从数字m开始判断</span></span><br><span class="line">            swap(nums,i,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">    <span class="keyword">int</span> nums[i] = nums[j];</span><br><span class="line">    <span class="keyword">int</span> nums[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入数组中存在重复数字返回true，否则返回false。代码中尽管有一个双重循环，但每个数字至多只要交换两次就能找到属于它自己的位置，总的时间复杂度是<em>O(n)</em>。所有操作步骤均为在输入数组上进行，不需要额外分配内存，因此空间复杂度为<em>O(1)</em>。</p><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">duplicate</span><span class="params">(self,numbers,duplication)</span>:</span></span><br><span class="line">        <span class="comment">#对数据进行处理</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> numbers <span class="keyword">or</span> len(numbers) &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> numbers:</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt; len(numbers) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   <span class="comment">#遍历数组</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(len(numbers)):</span><br><span class="line">            <span class="comment">#判断数字m是否与其下标i相等</span></span><br><span class="line">            <span class="keyword">while</span> numbers[i] != i</span><br><span class="line">            <span class="comment">#相等则将重复的数字放入数组duplication[0]中</span></span><br><span class="line">            <span class="keyword">if</span> numbers[i] == numbers[numbers[i]]:</span><br><span class="line">                    duplication[<span class="number">0</span>] = numbers[i]</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="comment">#交换数字</span></span><br><span class="line">                idx = numbers[i]</span><br><span class="line">                    numbers[i],numbers[idx] = numbers[idx],number[i]</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">dupulicate</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> length, <span class="keyword">int</span>[] duplication)</span></span>&#123;</span><br><span class="line">    <span class="comment">//对数据进行处理</span></span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || length &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将数组内容存入新建的hashtable</span></span><br><span class="line">    Hashtalbe&lt;Integer,Integer&gt; hash = <span class="keyword">new</span> Hashtable&lt;Integer,Integer&gt;(length);</span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">        <span class="comment">//判断哈希表中是否含有数字m</span></span><br><span class="line">        <span class="keyword">if</span>(hash.contains(array[i]))&#123;</span><br><span class="line">            <span class="comment">//若含有重复数字m，将数字放入数组duplication[0]中</span></span><br><span class="line">            duplication[<span class="number">0</span>] = array[i];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否则，将数字m加入哈希表</span></span><br><span class="line">            hash.put(i,array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该算法时间复杂度是<em>O(n)</em>，但它提高时间效率是以一个大小为<em>O(n)</em>的哈希表为代价的。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础知识</title>
      <link href="/2019/07/31/ES6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/07/31/ES6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>const初始化变量之后，在作用域中不可以改变，相当于java中的final关键字<br>例：const PI = 3.14159<br>直接声明即可  </p><a id="more"></a><p>1.var 重复声明，不能限制修改，函数级</p><p>2.let 不能重复声明，不能限制修改，块级</p><p>3.const 不能重复声明，能限制修改，块级  </p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以直接赋值</span></span><br><span class="line"><span class="comment">//json</span></span><br><span class="line">json = &#123;<span class="attr">a</span>:<span class="number">12</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;a,b&#125; = json;</span><br><span class="line"><span class="comment">//array</span></span><br><span class="line">arr = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> [a,b,c] = arr;</span><br></pre></td></tr></table></figure><p>1.等式两边的结构必须对应一样</p><p>2.式子右边必须合法</p><p>3.解构和赋值必须同时完成</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p><b>ES5</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)&#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.table([</span><br><span class="line">    a[<span class="number">0</span>]();</span><br><span class="line">    a[<span class="number">1</span>]();</span><br><span class="line">    a[<span class="number">2</span>]();</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 6 6 6</span></span><br></pre></td></tr></table></figure><p>在console.table()中的数据是function函数，在for执行之后，function才执行，var所声明的变量是函数级</p><p><b>ES6</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)&#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.table([</span><br><span class="line">    a[<span class="number">0</span>]();</span><br><span class="line">    a[<span class="number">1</span>]();</span><br><span class="line">    a[<span class="number">2</span>]();</span><br><span class="line">])</span><br><span class="line"><span class="comment">//0 2 4</span></span><br></pre></td></tr></table></figure><p>ES6中使用了let关键字，使得变量作用域为当前块作用域，它将变量的值保存下来，在每次循环中使用<br>另外，在ES6中，只需要一对{}既可以隔离函数、常量的作用域，var所声明的变量是函数级，而let是块级的</p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数基本样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6箭头函数省略function</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>)(<span class="params">S</span>) =&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.参数S集合只有一个参数时，小括号可以被省略<br>2.当花括号中的表达式只有返回值时，可省略花括号</p><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p><b>ES5函数声明</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> evens = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> odds = evens.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> v + <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(evens,odds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为&#123;2,3,4,5,6&#125;</span></span><br></pre></td></tr></table></figure><p><b>ES6箭头函数声明</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> evens = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">//唯一参数v，省略了小括号；只有返回值，省略了花括号</span></span><br><span class="line"><span class="keyword">let</span> odds = evens.map(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(evens,odds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为&#123;2,3,4,5,6&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p><b>ES5函数this的指向</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> factory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.a = <span class="string">'a'</span>;</span><br><span class="line">       <span class="keyword">this</span>.b = <span class="string">'b'</span>;</span><br><span class="line">       <span class="keyword">this</span>.c = &#123;</span><br><span class="line">           a: <span class="string">'a+'</span>;</span><br><span class="line">           b: fucntion() &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">new</span> factory().c.b());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a+</span></span><br></pre></td></tr></table></figure><p>ES5，this指向该函数被调用的对象，函数被执行时，指向调用该函数的对象。调用b的是c，c为对象，指向的是c，即为a+。</p><p><b>ES6箭头函数this的指向</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> factory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.a = <span class="string">'a'</span>;</span><br><span class="line">       <span class="keyword">this</span>.b = <span class="string">'b'</span>;</span><br><span class="line">       <span class="keyword">this</span>.c = &#123;</span><br><span class="line">           a: <span class="string">'a+'</span>;</span><br><span class="line">           b: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">new</span> factory().c.b());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a</span></span><br></pre></td></tr></table></figure><p>ES6，箭头函数函数体中的this的指向定义时this的指向。在b定义时，函数b中定义的this指向为构造函数factory，即在调用时，this.a仍然指向构造函数factory中的a。</p><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p><b>ES5</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x,y,z</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(y === <span class="literal">undefined</span>)&#123;</span><br><span class="line">            y = <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(z === <span class="literal">undefined</span>)&#123;</span><br><span class="line">            z = <span class="number">42</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x + y + z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(f(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//50</span></span><br></pre></td></tr></table></figure><p><b>ES6</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x,y = <span class="number">7</span>,z = <span class="number">42</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y + z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(f(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用默认参数做必选值检查</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkParameter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'can\'t be empty'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x = checkParameter(</span>), <span class="title">y</span> = 7, <span class="title">z</span> = 42)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y + z</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        f()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><b>ES5可变参数</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">            sum += item * <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//12</span></span><br></pre></td></tr></table></figure><p><b>ES6可变参数</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">...a</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        a.forEach(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">            sum += item * <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//12</span></span><br></pre></td></tr></table></figure><p>ES6中使用了…扩展运算符，不需要再取arguments，直接设置任意长度的参数值。</p><hr><p><b>ES5合并数组</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> parmas = [<span class="string">'hello'</span>,<span class="literal">true</span>,<span class="number">7</span>]</span><br><span class="line">    <span class="keyword">var</span> other = [<span class="number">1</span>,<span class="number">2</span>].concat(parmas)</span><br><span class="line">    <span class="built_in">console</span>.log(other)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[1,2,'hello',true,7]</span></span><br></pre></td></tr></table></figure><p><b>ES6利用扩展运算符合并数组</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> parmas = [<span class="string">'hello'</span>,<span class="literal">true</span>,<span class="number">7</span>]</span><br><span class="line">    <span class="keyword">var</span> other = [</span><br><span class="line">        <span class="comment">//...params是剩余参数</span></span><br><span class="line">        <span class="number">1</span>,<span class="number">2</span>,...parmas</span><br><span class="line">    ]</span><br><span class="line">    <span class="built_in">console</span>.log(other)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[1,2,'hello',true,7]</span></span><br></pre></td></tr></table></figure><p>…扩展运算符可用于收集参数和展开参数(支持数组和json)，剩余参数必须是最后一个</p><h2 id="对象代理"><a href="#对象代理" class="headerlink" title="对象代理"></a>对象代理</h2><p>ES6数据访问权限控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> Person = &#123;</span><br><span class="line">        name = <span class="string">'es6'</span>,</span><br><span class="line">        sex = <span class="string">'male'</span>,</span><br><span class="line">        age = <span class="string">'15'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Proxy</span>(Person,&#123;</span><br><span class="line">        <span class="keyword">get</span>(target,key)&#123;</span><br><span class="line">            <span class="keyword">return</span> target[key]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(target,key,value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key != <span class="string">'sex'</span>)&#123;</span><br><span class="line">                target[key] = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.table(&#123;</span><br><span class="line">        name:person.name,</span><br><span class="line">        sex:person.sex,</span><br><span class="line">        age:person.age,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不允许对sex变量进行操作</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        person.sex = <span class="string">'female'</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户访问的并不是真正的数据，而是被代理后的对象，操作的时候可以在Proxy中增加各种限制逻辑，这种方式还可以和业务逻辑隔离，起到数据保护的作用。</p><h2 id="原生对象扩展"><a href="#原生对象扩展" class="headerlink" title="原生对象扩展"></a>原生对象扩展</h2><h3 id="Array扩展"><a href="#Array扩展" class="headerlink" title="Array扩展"></a>Array扩展</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> arr2 = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;=<span class="number">3</span>?<span class="string">'大于3'</span>:<span class="string">'小于3'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//['小于3','大于3','大于3']</span></span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求平均数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">temp, item, index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (temp + item)/arr.length;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> temp + item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reduce()方法接受一个函数，数组中每个值从左到右开始缩减，计算返回一个唯一值。</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求偶数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> arr2 = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(item % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> arr2 = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="forEach及字符串模版"><a href="#forEach及字符串模版" class="headerlink" title="forEach及字符串模版"></a>forEach及字符串模版</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组遍历</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">   arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//字符串模版</span></span><br><span class="line">        alert(<span class="string">`第$(index)个,$(item)`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//json转字符串</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> json = &#123;<span class="attr">a</span> : <span class="number">12</span>, <span class="attr">b</span> : <span class="number">5</span>, <span class="attr">color</span> : <span class="string">'blue'</span>&#125;;</span><br><span class="line">    alert(<span class="built_in">JSON</span>.stringify(json));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串转json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//此时json格式必须标准</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'&#123;"a" : 12, "b" : 5&#125;'</span></span><br><span class="line">    <span class="keyword">let</span> json = <span class="built_in">JSON</span>.parse(str);</span><br><span class="line">    <span class="built_in">console</span>.log(json)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
